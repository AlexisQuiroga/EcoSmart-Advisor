2025-05-11 21:23:17,250 - semgrep.run_scan - DEBUG - semgrep version 1.2.0
2025-05-11 21:23:17,254 - semgrep.git - DEBUG - Failed to get project url from 'git ls-remote': Command failed with exit code: 128
-----
Command failed with output:
fatal: No remote configured to list refs from.


Failed to run 'git ls-remote --get-url'. Possible reasons:

- the git binary is not available
- the current working directory is not a git repository
- the baseline commit is not a parent of the current commit
    (if you are running through semgrep-app, check if you are setting `SEMGREP_BRANCH` or `SEMGREP_BASELINE_COMMIT` properly)
- the current working directory is not marked as safe
    (fix with `git config --global --add safe.directory $(pwd)`)

Try running the command yourself to debug the issue.
2025-05-11 21:23:17,254 - semgrep.config_resolver - DEBUG - Loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-05-11 21:23:17,269 - semgrep.config_resolver - DEBUG - Done loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-05-11 21:23:17,273 - semgrep.config_resolver - DEBUG - Saving rules to /tmp/semgrep-sajt8q9n.rules
2025-05-11 21:23:17,544 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEIddpkek/semgrep/bin/semgrep-core-proprietary'.
2025-05-11 21:23:18,269 - semgrep.rule_lang - DEBUG - semgrep-core validation response: valid=True
2025-05-11 21:23:18,270 - semgrep.rule_lang - DEBUG - semgrep-core validation succeeded
2025-05-11 21:23:18,270 - semgrep.rule_lang - DEBUG - RPC validation succeeded
2025-05-11 21:23:18,271 - semgrep.config_resolver - DEBUG - loaded 1 configs in 1.0168061256408691
2025-05-11 21:23:18,525 - semgrep.run_scan - VERBOSE - running 1250 rules from 1 config /home/runner/workspace/.config/.semgrep/semgrep_rules.json_0
2025-05-11 21:23:18,525 - semgrep.run_scan - VERBOSE - No .semgrepignore found. Using default .semgrepignore rules. See the docs for the list of default ignores: https://semgrep.dev/docs/cli-usage/#ignore-files
2025-05-11 21:23:18,528 - semgrep.run_scan - VERBOSE - Rules:
2025-05-11 21:23:18,528 - semgrep.run_scan - VERBOSE - <SKIPPED DATA (too many entries; use --max-log-list-entries)>
2025-05-11 21:23:18,744 - semgrep.core_runner - DEBUG - Passing whole rules directly to semgrep_core
2025-05-11 21:23:18,876 - semgrep.core_runner - DEBUG - Running Semgrep engine with command:
2025-05-11 21:23:18,876 - semgrep.core_runner - DEBUG - /tmp/_MEIddpkek/semgrep/bin/opengrep-core -json -rules /tmp/tmpiq34s24k.json -j 8 -targets /tmp/tmpvthpxgyi -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
2025-05-11 21:23:21,896 - semgrep.core_runner - DEBUG - --- semgrep-core stderr ---
[00.07][[34mINFO[0m]: Executed as: /tmp/_MEIddpkek/semgrep/bin/opengrep-core -json -rules /tmp/tmpiq34s24k.json -j 8 -targets /tmp/tmpvthpxgyi -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
[00.07][[34mINFO[0m]: Version: 1.2.0
[00.07][[34mINFO[0m]: Parsing rules in /tmp/tmpiq34s24k.json
[00.90][[34mINFO[0m]: scan: processing 117 files (skipping 0), with 734 rules (skipping 0 )
[02.97][[34mINFO[0m]: Custom ignore pattern: None
[02.97][[34mINFO[0m]: Custom ignore pattern: None
--- end semgrep-core stderr ---
2025-05-11 21:23:21,904 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('app.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = e2644ad455a212799a0730b8ad76663d78adb024c9ffa8f9895fb57dd489e272a3f3cc1be65db0794f59188d07a860995892dbeae860c39d9e44d8f55bc0178b_0
2025-05-11 21:23:21,905 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('app.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = ae1e85edb950475b372886323a86cda03f1745ee23989d2c30bcc60ba279204db7f4fed2d29af3c20a4ee5a7db75cf5c97a514131fa4638394995a94b74c6cc8_0
2025-05-11 21:23:21,905 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('app.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = ae1e85edb950475b372886323a86cda03f1745ee23989d2c30bcc60ba279204db7f4fed2d29af3c20a4ee5a7db75cf5c97a514131fa4638394995a94b74c6cc8_0
2025-05-11 21:23:21,905 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('app.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = ae1e85edb950475b372886323a86cda03f1745ee23989d2c30bcc60ba279204db7f4fed2d29af3c20a4ee5a7db75cf5c97a514131fa4638394995a94b74c6cc8_0
2025-05-11 21:23:21,906 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 8e29e7a3a08021783d4bdbe7c8cf7bb54ec0dfb6a3f0cb28907aa2994febad559e044c5237968968e594460cdeb81cf314e5510ed90af4432d62898e40d8f901_0
2025-05-11 21:23:21,907 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Error en autocompletado de tipo: $UTIL = require(\'util\')\n...\n $UTIL.format(`Error en autocompletado de tipo:,error,...)\n console.error(`Error en autocompletado de tipo:,error,...)\n', PosixPath('ecosmart_advisor/app/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = d87d703298a6145d04ded4066b50f79d2d58c2b41c17d9319ffa4ccfae53dd4f97afbcaad70ef184e1f01758c20c1a302361fb26fced9668075b2d429b544c80_0
2025-05-11 21:23:21,907 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Error en autocompletado de tipo: $UTIL = require(\'util\')\n...\n $UTIL.format(`Error en autocompletado de tipo:,error,...)\n console.error(`Error en autocompletado de tipo:,error,...)\n', PosixPath('ecosmart_advisor/app/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = d87d703298a6145d04ded4066b50f79d2d58c2b41c17d9319ffa4ccfae53dd4f97afbcaad70ef184e1f01758c20c1a302361fb26fced9668075b2d429b544c80_0
2025-05-11 21:23:21,908 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Error en autocompletado de tipo: $UTIL = require(\'util\')\n...\n $UTIL.format(`Error en autocompletado de tipo:,error,...)\n console.error(`Error en autocompletado de tipo:,error,...)\n', PosixPath('ecosmart_advisor/app/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = d87d703298a6145d04ded4066b50f79d2d58c2b41c17d9319ffa4ccfae53dd4f97afbcaad70ef184e1f01758c20c1a302361fb26fced9668075b2d429b544c80_0
2025-05-11 21:23:21,908 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = bdbe17fc4dd8b0608a8ee732d886711b7895f595c78c69b85d82c30887f812ed1b01bf18a5e058a5870c1e11b6d286c63d370a81b0ff99970a46e2e1b0096e96_0
2025-05-11 21:23:21,909 - semgrep.rule_match - DEBUG - match_key = ('alertElement.innerHTML = "...";\n alertElement.innerHTML = `\n        message\n        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n    ;\n', PosixPath('ecosmart_advisor/app/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = bbf81c4f5a484af935356c89badf1b6fef8098c2f447918b4b8d29b1282de4a19ef0734fd4144badccb7718e023445c50f7000ed53446a5466f863972d4a538a_0
2025-05-11 21:23:21,909 - semgrep.rule_match - DEBUG - match_key = ('alertElement.innerHTML = "...";\n alertElement.innerHTML = `\n        message\n        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n    ;\n', PosixPath('ecosmart_advisor/app/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = bbf81c4f5a484af935356c89badf1b6fef8098c2f447918b4b8d29b1282de4a19ef0734fd4144badccb7718e023445c50f7000ed53446a5466f863972d4a538a_0
2025-05-11 21:23:21,910 - semgrep.rule_match - DEBUG - match_key = ('alertElement.innerHTML = "...";\n alertElement.innerHTML = `\n        message\n        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n    ;\n', PosixPath('ecosmart_advisor/app/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = bbf81c4f5a484af935356c89badf1b6fef8098c2f447918b4b8d29b1282de4a19ef0734fd4144badccb7718e023445c50f7000ed53446a5466f863972d4a538a_0
2025-05-11 21:23:21,911 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = b5fb5da30b5b2366966ab4adc2eb3f5b6cd7264a382556b8a02ae1dbca70d598d1ac12e4e791f2db99da9ba2831d558ff203d6f174cc14989ec8b24a83194d77_0
2025-05-11 21:23:21,911 - semgrep.rule_match - DEBUG - match_key = ('alertElement.innerHTML = "...";\n alertElement.innerHTML = `\n        message\n        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n    ;\n alertElement.outerHTML = `\n        message\n        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n    ;\n document.write(...) alertElement.outerHTML = "...";\n document.write("...")', PosixPath('ecosmart_advisor/app/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = b084f7d596861efd27b726480bb9327c14e8da135e26781e598d04f8785a4cd962ff5b31e830e585ded50e71dff051f5e6e982bf6f01e0d8594ea96912b7aba5_0
2025-05-11 21:23:21,912 - semgrep.rule_match - DEBUG - match_key = ('alertElement.innerHTML = "...";\n alertElement.innerHTML = `\n        message\n        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n    ;\n alertElement.outerHTML = `\n        message\n        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n    ;\n document.write(...) alertElement.outerHTML = "...";\n document.write("...")', PosixPath('ecosmart_advisor/app/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = b084f7d596861efd27b726480bb9327c14e8da135e26781e598d04f8785a4cd962ff5b31e830e585ded50e71dff051f5e6e982bf6f01e0d8594ea96912b7aba5_0
2025-05-11 21:23:21,912 - semgrep.rule_match - DEBUG - match_key = ('alertElement.innerHTML = "...";\n alertElement.innerHTML = `\n        message\n        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n    ;\n alertElement.outerHTML = `\n        message\n        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n    ;\n document.write(...) alertElement.outerHTML = "...";\n document.write("...")', PosixPath('ecosmart_advisor/app/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = b084f7d596861efd27b726480bb9327c14e8da135e26781e598d04f8785a4cd962ff5b31e830e585ded50e71dff051f5e6e982bf6f01e0d8594ea96912b7aba5_0
2025-05-11 21:23:21,914 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/chatbot.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 7aa596a716c5b3115a2f72e774dabea3b669b9bbc0e595bcd320a3a1625538e12302204d3696f023d765dace1d9894703695af221fe07dd5688021e64501a212_0
2025-05-11 21:23:21,915 - semgrep.rule_match - DEBUG - match_key = ('\n    const chatContainer = document.getElementById(\'chatContainer\');\n    const preguntaInput = document.getElementById(\'preguntaInput\');\n    const enviarBtn = document.getElementById(\'enviarBtn\');\n    \n    // Función para agregar mensaje del usuario\n    function agregarMensajeUsuario(texto) {\n        const mensajeHTML = `\n            <div class="chat-message user">\n                <div class="d-flex align-items-start">\n                    <div>\n                        <p class="mb-0">${texto}</p>\n                    </div>\n                    <div class="ms-2 mt-1">\n                        <i class="fas fa-user text-primary"></i>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para agregar mensaje del bot\n    function agregarMensajeBot(texto) {\n        const mensajeHTML = `\n            <div class="chat-message bot">\n                <div class="d-flex align-items-start">\n                    <div class="me-2 mt-1">\n                        <i class="fas fa-robot text-info"></i>\n                    </div>\n                    <div>\n                        <p class="mb-0">${texto}</p>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para mostrar indicador de escritura\n    function mostrarEscribiendo() {\n        const mensajeHTML = `\n            <div class="chat-message bot" id="typing-message">\n                <div class="d-flex align-items-start">\n                    <div class="me-2 mt-1">\n                        <i class="fas fa-robot text-info"></i>\n                    </div>\n                    <div class="typing-indicator">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para quitar indicador de escritura\n    function quitarEscribiendo() {\n        const typingMessage = document.getElementById(\'typing-message\');\n        if (typingMessage) {\n            typingMessage.remove();\n        }\n    }\n    \n    // Función para hacer scroll hasta el final del chat\n    function scrollToBottom() {\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n    }\n    \n    // Función para enviar pregunta al servidor\n    function enviarPregunta() {\n        const pregunta = preguntaInput.value.trim();\n        if (pregunta === \'\') return;\n        \n        // Agregar mensaje del usuario al chat\n        agregarMensajeUsuario(pregunta);\n        \n        // Limpiar input\n        preguntaInput.value = \'\';\n        \n        // Mostrar indicador de escritura\n        mostrarEscribiendo();\n        \n        // Enviar pregunta a la API\n        fetch(\'{{ url_for(\'chatbot.consulta_chatbot\') }}\', {\n            method: \'POST\',\n            headers: {\n                \'Content-Type\': \'application/json\',\n            },\n            body: JSON.stringify({ pregunta: pregunta }),\n        })\n        .then(response => response.json())\n        .then(data => {\n            // Quitar indicador de escritura\n            quitarEscribiendo();\n            \n            // Agregar respuesta del bot\n            agregarMensajeBot(data.respuesta);\n        })\n        .catch(error => {\n            console.error(\'Error:\', error);\n            quitarEscribiendo();\n            agregarMensajeBot(\'Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, inténtalo de nuevo más tarde.\');\n        });\n    }\n    \n    // Función para seleccionar pregunta sugerida\n    function seleccionarPregunta(elemento) {\n        preguntaInput.value = elemento.textContent || elemento.innerText;\n        preguntaInput.focus();\n    }\n    \n    // Event listeners\n    enviarBtn.addEventListener(\'click\', enviarPregunta);\n    \n    preguntaInput.addEventListener(\'keypress\', function(e) {\n        if (e.key === \'Enter\' && !e.shiftKey) {\n            e.preventDefault();\n            enviarPregunta();\n        }\n    });\n    \n    // Asegurarse de que el chat esté en el fondo al cargar\n    document.addEventListener(\'DOMContentLoaded\', scrollToBottom);\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    const chatContainer = document.getElementById(\'chatContainer\');\n    const preguntaInput = document.getElementById(\'preguntaInput\');\n    const enviarBtn = document.getElementById(\'enviarBtn\');\n    \n    // Función para agregar mensaje del usuario\n    function agregarMensajeUsuario(texto) {\n        const mensajeHTML = `\n            <div class="chat-message user">\n                <div class="d-flex align-items-start">\n                    <div>\n                        <p class="mb-0">${texto}</p>\n                    </div>\n                    <div class="ms-2 mt-1">\n                        <i class="fas fa-user text-primary"></i>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para agregar mensaje del bot\n    function agregarMensajeBot(texto) {\n        const mensajeHTML = `\n            <div class="chat-message bot">\n                <div class="d-flex align-items-start">\n                    <div class="me-2 mt-1">\n                        <i class="fas fa-robot text-info"></i>\n                    </div>\n                    <div>\n                        <p class="mb-0">${texto}</p>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para mostrar indicador de escritura\n    function mostrarEscribiendo() {\n        const mensajeHTML = `\n            <div class="chat-message bot" id="typing-message">\n                <div class="d-flex align-items-start">\n                    <div class="me-2 mt-1">\n                        <i class="fas fa-robot text-info"></i>\n                    </div>\n                    <div class="typing-indicator">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para quitar indicador de escritura\n    function quitarEscribiendo() {\n        const typingMessage = document.getElementById(\'typing-message\');\n        if (typingMessage) {\n            typingMessage.remove();\n        }\n    }\n    \n    // Función para hacer scroll hasta el final del chat\n    function scrollToBottom() {\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n    }\n    \n    // Función para enviar pregunta al servidor\n    function enviarPregunta() {\n        const pregunta = preguntaInput.value.trim();\n        if (pregunta === \'\') return;\n        \n        // Agregar mensaje del usuario al chat\n        agregarMensajeUsuario(pregunta);\n        \n        // Limpiar input\n        preguntaInput.value = \'\';\n        \n        // Mostrar indicador de escritura\n        mostrarEscribiendo();\n        \n        // Enviar pregunta a la API\n        fetch(\'{{ url_for(\'chatbot.consulta_chatbot\') }}\', {\n            method: \'POST\',\n            headers: {\n                \'Content-Type\': \'application/json\',\n            },\n            body: JSON.stringify({ pregunta: pregunta }),\n        })\n        .then(response => response.json())\n        .then(data => {\n            // Quitar indicador de escritura\n            quitarEscribiendo();\n            \n            // Agregar respuesta del bot\n            agregarMensajeBot(data.respuesta);\n        })\n        .catch(error => {\n            console.error(\'Error:\', error);\n            quitarEscribiendo();\n            agregarMensajeBot(\'Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, inténtalo de nuevo más tarde.\');\n        });\n    }\n    \n    // Función para seleccionar pregunta sugerida\n    function seleccionarPregunta(elemento) {\n        preguntaInput.value = elemento.textContent || elemento.innerText;\n        preguntaInput.focus();\n    }\n    \n    // Event listeners\n    enviarBtn.addEventListener(\'click\', enviarPregunta);\n    \n    preguntaInput.addEventListener(\'keypress\', function(e) {\n        if (e.key === \'Enter\' && !e.shiftKey) {\n            e.preventDefault();\n            enviarPregunta();\n        }\n    });\n    \n    // Asegurarse de que el chat esté en el fondo al cargar\n    document.addEventListener(\'DOMContentLoaded\', scrollToBottom);\n</script>\n', PosixPath('ecosmart_advisor/app/templates/chatbot.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = adae817d87dbd0cd09d30f3f52063e4ff4671eb7a75e5fe40efacfa7f43e196dcf5d2731dc86cb504abe68d45a9ea65bf817c3f1b6cae6a0b4a704848d6bc9ba_0
2025-05-11 21:23:21,917 - semgrep.rule_match - DEBUG - match_key = ('\n    const chatContainer = document.getElementById(\'chatContainer\');\n    const preguntaInput = document.getElementById(\'preguntaInput\');\n    const enviarBtn = document.getElementById(\'enviarBtn\');\n    \n    // Función para agregar mensaje del usuario\n    function agregarMensajeUsuario(texto) {\n        const mensajeHTML = `\n            <div class="chat-message user">\n                <div class="d-flex align-items-start">\n                    <div>\n                        <p class="mb-0">${texto}</p>\n                    </div>\n                    <div class="ms-2 mt-1">\n                        <i class="fas fa-user text-primary"></i>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para agregar mensaje del bot\n    function agregarMensajeBot(texto) {\n        const mensajeHTML = `\n            <div class="chat-message bot">\n                <div class="d-flex align-items-start">\n                    <div class="me-2 mt-1">\n                        <i class="fas fa-robot text-info"></i>\n                    </div>\n                    <div>\n                        <p class="mb-0">${texto}</p>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para mostrar indicador de escritura\n    function mostrarEscribiendo() {\n        const mensajeHTML = `\n            <div class="chat-message bot" id="typing-message">\n                <div class="d-flex align-items-start">\n                    <div class="me-2 mt-1">\n                        <i class="fas fa-robot text-info"></i>\n                    </div>\n                    <div class="typing-indicator">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para quitar indicador de escritura\n    function quitarEscribiendo() {\n        const typingMessage = document.getElementById(\'typing-message\');\n        if (typingMessage) {\n            typingMessage.remove();\n        }\n    }\n    \n    // Función para hacer scroll hasta el final del chat\n    function scrollToBottom() {\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n    }\n    \n    // Función para enviar pregunta al servidor\n    function enviarPregunta() {\n        const pregunta = preguntaInput.value.trim();\n        if (pregunta === \'\') return;\n        \n        // Agregar mensaje del usuario al chat\n        agregarMensajeUsuario(pregunta);\n        \n        // Limpiar input\n        preguntaInput.value = \'\';\n        \n        // Mostrar indicador de escritura\n        mostrarEscribiendo();\n        \n        // Enviar pregunta a la API\n        fetch(\'{{ url_for(\'chatbot.consulta_chatbot\') }}\', {\n            method: \'POST\',\n            headers: {\n                \'Content-Type\': \'application/json\',\n            },\n            body: JSON.stringify({ pregunta: pregunta }),\n        })\n        .then(response => response.json())\n        .then(data => {\n            // Quitar indicador de escritura\n            quitarEscribiendo();\n            \n            // Agregar respuesta del bot\n            agregarMensajeBot(data.respuesta);\n        })\n        .catch(error => {\n            console.error(\'Error:\', error);\n            quitarEscribiendo();\n            agregarMensajeBot(\'Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, inténtalo de nuevo más tarde.\');\n        });\n    }\n    \n    // Función para seleccionar pregunta sugerida\n    function seleccionarPregunta(elemento) {\n        preguntaInput.value = elemento.textContent || elemento.innerText;\n        preguntaInput.focus();\n    }\n    \n    // Event listeners\n    enviarBtn.addEventListener(\'click\', enviarPregunta);\n    \n    preguntaInput.addEventListener(\'keypress\', function(e) {\n        if (e.key === \'Enter\' && !e.shiftKey) {\n            e.preventDefault();\n            enviarPregunta();\n        }\n    });\n    \n    // Asegurarse de que el chat esté en el fondo al cargar\n    document.addEventListener(\'DOMContentLoaded\', scrollToBottom);\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    const chatContainer = document.getElementById(\'chatContainer\');\n    const preguntaInput = document.getElementById(\'preguntaInput\');\n    const enviarBtn = document.getElementById(\'enviarBtn\');\n    \n    // Función para agregar mensaje del usuario\n    function agregarMensajeUsuario(texto) {\n        const mensajeHTML = `\n            <div class="chat-message user">\n                <div class="d-flex align-items-start">\n                    <div>\n                        <p class="mb-0">${texto}</p>\n                    </div>\n                    <div class="ms-2 mt-1">\n                        <i class="fas fa-user text-primary"></i>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para agregar mensaje del bot\n    function agregarMensajeBot(texto) {\n        const mensajeHTML = `\n            <div class="chat-message bot">\n                <div class="d-flex align-items-start">\n                    <div class="me-2 mt-1">\n                        <i class="fas fa-robot text-info"></i>\n                    </div>\n                    <div>\n                        <p class="mb-0">${texto}</p>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para mostrar indicador de escritura\n    function mostrarEscribiendo() {\n        const mensajeHTML = `\n            <div class="chat-message bot" id="typing-message">\n                <div class="d-flex align-items-start">\n                    <div class="me-2 mt-1">\n                        <i class="fas fa-robot text-info"></i>\n                    </div>\n                    <div class="typing-indicator">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para quitar indicador de escritura\n    function quitarEscribiendo() {\n        const typingMessage = document.getElementById(\'typing-message\');\n        if (typingMessage) {\n            typingMessage.remove();\n        }\n    }\n    \n    // Función para hacer scroll hasta el final del chat\n    function scrollToBottom() {\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n    }\n    \n    // Función para enviar pregunta al servidor\n    function enviarPregunta() {\n        const pregunta = preguntaInput.value.trim();\n        if (pregunta === \'\') return;\n        \n        // Agregar mensaje del usuario al chat\n        agregarMensajeUsuario(pregunta);\n        \n        // Limpiar input\n        preguntaInput.value = \'\';\n        \n        // Mostrar indicador de escritura\n        mostrarEscribiendo();\n        \n        // Enviar pregunta a la API\n        fetch(\'{{ url_for(\'chatbot.consulta_chatbot\') }}\', {\n            method: \'POST\',\n            headers: {\n                \'Content-Type\': \'application/json\',\n            },\n            body: JSON.stringify({ pregunta: pregunta }),\n        })\n        .then(response => response.json())\n        .then(data => {\n            // Quitar indicador de escritura\n            quitarEscribiendo();\n            \n            // Agregar respuesta del bot\n            agregarMensajeBot(data.respuesta);\n        })\n        .catch(error => {\n            console.error(\'Error:\', error);\n            quitarEscribiendo();\n            agregarMensajeBot(\'Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, inténtalo de nuevo más tarde.\');\n        });\n    }\n    \n    // Función para seleccionar pregunta sugerida\n    function seleccionarPregunta(elemento) {\n        preguntaInput.value = elemento.textContent || elemento.innerText;\n        preguntaInput.focus();\n    }\n    \n    // Event listeners\n    enviarBtn.addEventListener(\'click\', enviarPregunta);\n    \n    preguntaInput.addEventListener(\'keypress\', function(e) {\n        if (e.key === \'Enter\' && !e.shiftKey) {\n            e.preventDefault();\n            enviarPregunta();\n        }\n    });\n    \n    // Asegurarse de que el chat esté en el fondo al cargar\n    document.addEventListener(\'DOMContentLoaded\', scrollToBottom);\n</script>\n', PosixPath('ecosmart_advisor/app/templates/chatbot.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = adae817d87dbd0cd09d30f3f52063e4ff4671eb7a75e5fe40efacfa7f43e196dcf5d2731dc86cb504abe68d45a9ea65bf817c3f1b6cae6a0b4a704848d6bc9ba_0
2025-05-11 21:23:21,919 - semgrep.rule_match - DEBUG - match_key = ('\n    const chatContainer = document.getElementById(\'chatContainer\');\n    const preguntaInput = document.getElementById(\'preguntaInput\');\n    const enviarBtn = document.getElementById(\'enviarBtn\');\n    \n    // Función para agregar mensaje del usuario\n    function agregarMensajeUsuario(texto) {\n        const mensajeHTML = `\n            <div class="chat-message user">\n                <div class="d-flex align-items-start">\n                    <div>\n                        <p class="mb-0">${texto}</p>\n                    </div>\n                    <div class="ms-2 mt-1">\n                        <i class="fas fa-user text-primary"></i>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para agregar mensaje del bot\n    function agregarMensajeBot(texto) {\n        const mensajeHTML = `\n            <div class="chat-message bot">\n                <div class="d-flex align-items-start">\n                    <div class="me-2 mt-1">\n                        <i class="fas fa-robot text-info"></i>\n                    </div>\n                    <div>\n                        <p class="mb-0">${texto}</p>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para mostrar indicador de escritura\n    function mostrarEscribiendo() {\n        const mensajeHTML = `\n            <div class="chat-message bot" id="typing-message">\n                <div class="d-flex align-items-start">\n                    <div class="me-2 mt-1">\n                        <i class="fas fa-robot text-info"></i>\n                    </div>\n                    <div class="typing-indicator">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para quitar indicador de escritura\n    function quitarEscribiendo() {\n        const typingMessage = document.getElementById(\'typing-message\');\n        if (typingMessage) {\n            typingMessage.remove();\n        }\n    }\n    \n    // Función para hacer scroll hasta el final del chat\n    function scrollToBottom() {\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n    }\n    \n    // Función para enviar pregunta al servidor\n    function enviarPregunta() {\n        const pregunta = preguntaInput.value.trim();\n        if (pregunta === \'\') return;\n        \n        // Agregar mensaje del usuario al chat\n        agregarMensajeUsuario(pregunta);\n        \n        // Limpiar input\n        preguntaInput.value = \'\';\n        \n        // Mostrar indicador de escritura\n        mostrarEscribiendo();\n        \n        // Enviar pregunta a la API\n        fetch(\'{{ url_for(\'chatbot.consulta_chatbot\') }}\', {\n            method: \'POST\',\n            headers: {\n                \'Content-Type\': \'application/json\',\n            },\n            body: JSON.stringify({ pregunta: pregunta }),\n        })\n        .then(response => response.json())\n        .then(data => {\n            // Quitar indicador de escritura\n            quitarEscribiendo();\n            \n            // Agregar respuesta del bot\n            agregarMensajeBot(data.respuesta);\n        })\n        .catch(error => {\n            console.error(\'Error:\', error);\n            quitarEscribiendo();\n            agregarMensajeBot(\'Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, inténtalo de nuevo más tarde.\');\n        });\n    }\n    \n    // Función para seleccionar pregunta sugerida\n    function seleccionarPregunta(elemento) {\n        preguntaInput.value = elemento.textContent || elemento.innerText;\n        preguntaInput.focus();\n    }\n    \n    // Event listeners\n    enviarBtn.addEventListener(\'click\', enviarPregunta);\n    \n    preguntaInput.addEventListener(\'keypress\', function(e) {\n        if (e.key === \'Enter\' && !e.shiftKey) {\n            e.preventDefault();\n            enviarPregunta();\n        }\n    });\n    \n    // Asegurarse de que el chat esté en el fondo al cargar\n    document.addEventListener(\'DOMContentLoaded\', scrollToBottom);\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    const chatContainer = document.getElementById(\'chatContainer\');\n    const preguntaInput = document.getElementById(\'preguntaInput\');\n    const enviarBtn = document.getElementById(\'enviarBtn\');\n    \n    // Función para agregar mensaje del usuario\n    function agregarMensajeUsuario(texto) {\n        const mensajeHTML = `\n            <div class="chat-message user">\n                <div class="d-flex align-items-start">\n                    <div>\n                        <p class="mb-0">${texto}</p>\n                    </div>\n                    <div class="ms-2 mt-1">\n                        <i class="fas fa-user text-primary"></i>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para agregar mensaje del bot\n    function agregarMensajeBot(texto) {\n        const mensajeHTML = `\n            <div class="chat-message bot">\n                <div class="d-flex align-items-start">\n                    <div class="me-2 mt-1">\n                        <i class="fas fa-robot text-info"></i>\n                    </div>\n                    <div>\n                        <p class="mb-0">${texto}</p>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para mostrar indicador de escritura\n    function mostrarEscribiendo() {\n        const mensajeHTML = `\n            <div class="chat-message bot" id="typing-message">\n                <div class="d-flex align-items-start">\n                    <div class="me-2 mt-1">\n                        <i class="fas fa-robot text-info"></i>\n                    </div>\n                    <div class="typing-indicator">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </div>\n                </div>\n            </div>\n        `;\n        chatContainer.innerHTML += mensajeHTML;\n        scrollToBottom();\n    }\n    \n    // Función para quitar indicador de escritura\n    function quitarEscribiendo() {\n        const typingMessage = document.getElementById(\'typing-message\');\n        if (typingMessage) {\n            typingMessage.remove();\n        }\n    }\n    \n    // Función para hacer scroll hasta el final del chat\n    function scrollToBottom() {\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n    }\n    \n    // Función para enviar pregunta al servidor\n    function enviarPregunta() {\n        const pregunta = preguntaInput.value.trim();\n        if (pregunta === \'\') return;\n        \n        // Agregar mensaje del usuario al chat\n        agregarMensajeUsuario(pregunta);\n        \n        // Limpiar input\n        preguntaInput.value = \'\';\n        \n        // Mostrar indicador de escritura\n        mostrarEscribiendo();\n        \n        // Enviar pregunta a la API\n        fetch(\'{{ url_for(\'chatbot.consulta_chatbot\') }}\', {\n            method: \'POST\',\n            headers: {\n                \'Content-Type\': \'application/json\',\n            },\n            body: JSON.stringify({ pregunta: pregunta }),\n        })\n        .then(response => response.json())\n        .then(data => {\n            // Quitar indicador de escritura\n            quitarEscribiendo();\n            \n            // Agregar respuesta del bot\n            agregarMensajeBot(data.respuesta);\n        })\n        .catch(error => {\n            console.error(\'Error:\', error);\n            quitarEscribiendo();\n            agregarMensajeBot(\'Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, inténtalo de nuevo más tarde.\');\n        });\n    }\n    \n    // Función para seleccionar pregunta sugerida\n    function seleccionarPregunta(elemento) {\n        preguntaInput.value = elemento.textContent || elemento.innerText;\n        preguntaInput.focus();\n    }\n    \n    // Event listeners\n    enviarBtn.addEventListener(\'click\', enviarPregunta);\n    \n    preguntaInput.addEventListener(\'keypress\', function(e) {\n        if (e.key === \'Enter\' && !e.shiftKey) {\n            e.preventDefault();\n            enviarPregunta();\n        }\n    });\n    \n    // Asegurarse de que el chat esté en el fondo al cargar\n    document.addEventListener(\'DOMContentLoaded\', scrollToBottom);\n</script>\n', PosixPath('ecosmart_advisor/app/templates/chatbot.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = adae817d87dbd0cd09d30f3f52063e4ff4671eb7a75e5fe40efacfa7f43e196dcf5d2731dc86cb504abe68d45a9ea65bf817c3f1b6cae6a0b4a704848d6bc9ba_0
2025-05-11 21:23:21,920 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/formulario_diagnostico.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 89a0b354083f238334c3df341be882a1bed08054ddbed44b9a17ebfb1808c92416fedcf91587f2956c7ee941350a93e5cf637ada6c787b468dbec64211f72a6d_0
2025-05-11 21:23:21,921 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" > <script  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/formulario_diagnostico.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 46cb23f2816da439366b3de940045545a4be2631be1effeafa65e95a8b1e932b2b2cd35a786457b0512ad644c0fd6d0d012b4b2b376bfee797004fb2f421dc30_0
2025-05-11 21:23:21,921 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" > <script  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/formulario_diagnostico.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 46cb23f2816da439366b3de940045545a4be2631be1effeafa65e95a8b1e932b2b2cd35a786457b0512ad644c0fd6d0d012b4b2b376bfee797004fb2f421dc30_0
2025-05-11 21:23:21,922 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" > <script  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/formulario_diagnostico.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 46cb23f2816da439366b3de940045545a4be2631be1effeafa65e95a8b1e932b2b2cd35a786457b0512ad644c0fd6d0d012b4b2b376bfee797004fb2f421dc30_0
2025-05-11 21:23:21,923 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/formulario_diagnostico.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 89a0b354083f238334c3df341be882a1bed08054ddbed44b9a17ebfb1808c92416fedcf91587f2956c7ee941350a93e5cf637ada6c787b468dbec64211f72a6d_0
2025-05-11 21:23:21,924 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / > <script  rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / >...</script>', PosixPath('ecosmart_advisor/app/templates/formulario_diagnostico.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = cf4f47249d44358ceae5126642f059c0a9993242c223ce49dd9c0810153d95b3cdbe166d2bad6010699edd1eb533dc61f031397ca170c892162294564e67eb01_0
2025-05-11 21:23:21,924 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / > <script  rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / >...</script>', PosixPath('ecosmart_advisor/app/templates/formulario_diagnostico.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = cf4f47249d44358ceae5126642f059c0a9993242c223ce49dd9c0810153d95b3cdbe166d2bad6010699edd1eb533dc61f031397ca170c892162294564e67eb01_0
2025-05-11 21:23:21,925 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / > <script  rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / >...</script>', PosixPath('ecosmart_advisor/app/templates/formulario_diagnostico.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = cf4f47249d44358ceae5126642f059c0a9993242c223ce49dd9c0810153d95b3cdbe166d2bad6010699edd1eb533dc61f031397ca170c892162294564e67eb01_0
2025-05-11 21:23:21,926 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/formulario_simulador.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 25257249fd69f2abc392e00d2075b68653bb202391f950c2b7c63b175a7cea32223e0fa7d19353452d125efa1216a6f3d33ebe3695312c4283c120b2c8abd64b_0
2025-05-11 21:23:21,926 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" > <script  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/formulario_simulador.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e4351c5fbbd19d7ecfd213dc6dd49da9801702b82776dc67a4925cec67807f1c80852f3c29077f4399000b6e380ae2ebfd03c07594aeba97de1dab1034e4e8e7_0
2025-05-11 21:23:21,927 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" > <script  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/formulario_simulador.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e4351c5fbbd19d7ecfd213dc6dd49da9801702b82776dc67a4925cec67807f1c80852f3c29077f4399000b6e380ae2ebfd03c07594aeba97de1dab1034e4e8e7_0
2025-05-11 21:23:21,928 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" > <script  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/formulario_simulador.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e4351c5fbbd19d7ecfd213dc6dd49da9801702b82776dc67a4925cec67807f1c80852f3c29077f4399000b6e380ae2ebfd03c07594aeba97de1dab1034e4e8e7_0
2025-05-11 21:23:21,929 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/formulario_simulador.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 25257249fd69f2abc392e00d2075b68653bb202391f950c2b7c63b175a7cea32223e0fa7d19353452d125efa1216a6f3d33ebe3695312c4283c120b2c8abd64b_0
2025-05-11 21:23:21,929 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / > <script  rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / >...</script>', PosixPath('ecosmart_advisor/app/templates/formulario_simulador.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e131d93e457773b1f68727303d0d5459197c9a277de3e2c417636b4c5334ee6095603a756ff1c897a48b485ebc764b4030a5965f79d11f38b04afb562a31b2ab_0
2025-05-11 21:23:21,930 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / > <script  rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / >...</script>', PosixPath('ecosmart_advisor/app/templates/formulario_simulador.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e131d93e457773b1f68727303d0d5459197c9a277de3e2c417636b4c5334ee6095603a756ff1c897a48b485ebc764b4030a5965f79d11f38b04afb562a31b2ab_0
2025-05-11 21:23:21,931 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / > <script  rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" / >...</script>', PosixPath('ecosmart_advisor/app/templates/formulario_simulador.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e131d93e457773b1f68727303d0d5459197c9a277de3e2c417636b4c5334ee6095603a756ff1c897a48b485ebc764b4030a5965f79d11f38b04afb562a31b2ab_0
2025-05-11 21:23:21,931 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = d3aa330977db0485406092ddfa34c68f18dafaef31969e7543a3d4dbd16387da6eec5b41b7a1c0973d4d49a07dd3048e9aba969026b88206b04dab9ddacd72ad_0
2025-05-11 21:23:21,932 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" > <script  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0cbeeda45491a7db600e2df138a0a67bfe8105b166407d368029205c3d2c4a11921eb6762bc3747a5f4594605f8b6d34fca0ece393a73775d15bb42ded2739e3_0
2025-05-11 21:23:21,933 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" > <script  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0cbeeda45491a7db600e2df138a0a67bfe8105b166407d368029205c3d2c4a11921eb6762bc3747a5f4594605f8b6d34fca0ece393a73775d15bb42ded2739e3_0
2025-05-11 21:23:21,933 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" > <script  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0cbeeda45491a7db600e2df138a0a67bfe8105b166407d368029205c3d2c4a11921eb6762bc3747a5f4594605f8b6d34fca0ece393a73775d15bb42ded2739e3_0
2025-05-11 21:23:21,934 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = d3aa330977db0485406092ddfa34c68f18dafaef31969e7543a3d4dbd16387da6eec5b41b7a1c0973d4d49a07dd3048e9aba969026b88206b04dab9ddacd72ad_0
2025-05-11 21:23:21,934 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" > <script  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 21d352ae39f14d925631536b225651433da92bde7b16987d0a32f190fa70857ff3ea1f66c60b67841ad8b409e920c521b4edc251730bf880c8e0b869878f3c4b_0
2025-05-11 21:23:21,935 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" > <script  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 21d352ae39f14d925631536b225651433da92bde7b16987d0a32f190fa70857ff3ea1f66c60b67841ad8b409e920c521b4edc251730bf880c8e0b869878f3c4b_0
2025-05-11 21:23:21,935 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" > <script  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 21d352ae39f14d925631536b225651433da92bde7b16987d0a32f190fa70857ff3ea1f66c60b67841ad8b409e920c521b4edc251730bf880c8e0b869878f3c4b_0
2025-05-11 21:23:21,936 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = d3aa330977db0485406092ddfa34c68f18dafaef31969e7543a3d4dbd16387da6eec5b41b7a1c0973d4d49a07dd3048e9aba969026b88206b04dab9ddacd72ad_0
2025-05-11 21:23:21,936 - semgrep.rule_match - DEBUG - match_key = (' href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" rel="stylesheet" > <script  href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" rel="stylesheet" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = da5f7e4d67f55d8d635a28fbb860dca4c63bcb2b2223a932518ffa3e22e544a909453b10d1247d04404afe80fe3b1e0b0ffdbf39fb663cbbc04c2645442cee69_0
2025-05-11 21:23:21,937 - semgrep.rule_match - DEBUG - match_key = (' href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" rel="stylesheet" > <script  href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" rel="stylesheet" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = da5f7e4d67f55d8d635a28fbb860dca4c63bcb2b2223a932518ffa3e22e544a909453b10d1247d04404afe80fe3b1e0b0ffdbf39fb663cbbc04c2645442cee69_0
2025-05-11 21:23:21,937 - semgrep.rule_match - DEBUG - match_key = (' href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" rel="stylesheet" > <script  href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" rel="stylesheet" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = da5f7e4d67f55d8d635a28fbb860dca4c63bcb2b2223a932518ffa3e22e544a909453b10d1247d04404afe80fe3b1e0b0ffdbf39fb663cbbc04c2645442cee69_0
2025-05-11 21:23:21,938 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = d3aa330977db0485406092ddfa34c68f18dafaef31969e7543a3d4dbd16387da6eec5b41b7a1c0973d4d49a07dd3048e9aba969026b88206b04dab9ddacd72ad_0
2025-05-11 21:23:21,939 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" > <script  src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0ca928fa4f391a0587eb1f58246605585f35095fd1725ae9f5823746d2455ab3e7e45929e26148f6e2b72767c812df7db7bcdd8335ecb0aa5ba77428c4285996_0
2025-05-11 21:23:21,939 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" > <script  src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0ca928fa4f391a0587eb1f58246605585f35095fd1725ae9f5823746d2455ab3e7e45929e26148f6e2b72767c812df7db7bcdd8335ecb0aa5ba77428c4285996_0
2025-05-11 21:23:21,940 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" > <script  src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0ca928fa4f391a0587eb1f58246605585f35095fd1725ae9f5823746d2455ab3e7e45929e26148f6e2b72767c812df7db7bcdd8335ecb0aa5ba77428c4285996_0
2025-05-11 21:23:21,940 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = d3aa330977db0485406092ddfa34c68f18dafaef31969e7543a3d4dbd16387da6eec5b41b7a1c0973d4d49a07dd3048e9aba969026b88206b04dab9ddacd72ad_0
2025-05-11 21:23:21,941 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" > <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 7442df386a0d112e1da224c6f9d076d6a62af4a39b51737cf1b349bc70ea88a0cb723cae6bcd01972d1d79d35b096c2d17c5d4cf8caeeda1c7a8db91750519b1_0
2025-05-11 21:23:21,941 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" > <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 7442df386a0d112e1da224c6f9d076d6a62af4a39b51737cf1b349bc70ea88a0cb723cae6bcd01972d1d79d35b096c2d17c5d4cf8caeeda1c7a8db91750519b1_0
2025-05-11 21:23:21,941 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" > <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 7442df386a0d112e1da224c6f9d076d6a62af4a39b51737cf1b349bc70ea88a0cb723cae6bcd01972d1d79d35b096c2d17c5d4cf8caeeda1c7a8db91750519b1_0
2025-05-11 21:23:21,942 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = d3aa330977db0485406092ddfa34c68f18dafaef31969e7543a3d4dbd16387da6eec5b41b7a1c0973d4d49a07dd3048e9aba969026b88206b04dab9ddacd72ad_0
2025-05-11 21:23:21,942 - semgrep.rule_match - DEBUG - match_key = (' src="https://code.jquery.com/jquery-3.7.1.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://code.jquery.com/jquery-3.7.1.min.js" > <script  src="https://code.jquery.com/jquery-3.7.1.min.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 601ff81d48ff17720bd2adac67dd36083643652c53c47c011503190bdd4e6a5551d7b7b6b5096cef12038d8f713e50cb30fe9336ddb333809f5d438af88a47b4_0
2025-05-11 21:23:21,943 - semgrep.rule_match - DEBUG - match_key = (' src="https://code.jquery.com/jquery-3.7.1.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://code.jquery.com/jquery-3.7.1.min.js" > <script  src="https://code.jquery.com/jquery-3.7.1.min.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 601ff81d48ff17720bd2adac67dd36083643652c53c47c011503190bdd4e6a5551d7b7b6b5096cef12038d8f713e50cb30fe9336ddb333809f5d438af88a47b4_0
2025-05-11 21:23:21,943 - semgrep.rule_match - DEBUG - match_key = (' src="https://code.jquery.com/jquery-3.7.1.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://code.jquery.com/jquery-3.7.1.min.js" > <script  src="https://code.jquery.com/jquery-3.7.1.min.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 601ff81d48ff17720bd2adac67dd36083643652c53c47c011503190bdd4e6a5551d7b7b6b5096cef12038d8f713e50cb30fe9336ddb333809f5d438af88a47b4_0
2025-05-11 21:23:21,943 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 030a81c5e3a828998f9ef8c2aad5c390d936c32e7cdd7c07ac2704072bf0860fe3a66f0355e60a0d8600b6e399d246872f2621414595c7bb2acfbf3ecaff477d_0
2025-05-11 21:23:21,944 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 5383d2750e72a21c0440166839ae64dc0b0a6dcbf3db714e3ac5bca02362b036ef9c67605198710ec03140daa8f7e583d69aacb6ba06ad01efa109f5e7aff896_0
2025-05-11 21:23:21,944 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 5383d2750e72a21c0440166839ae64dc0b0a6dcbf3db714e3ac5bca02362b036ef9c67605198710ec03140daa8f7e583d69aacb6ba06ad01efa109f5e7aff896_0
2025-05-11 21:23:21,945 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 5383d2750e72a21c0440166839ae64dc0b0a6dcbf3db714e3ac5bca02362b036ef9c67605198710ec03140daa8f7e583d69aacb6ba06ad01efa109f5e7aff896_0
2025-05-11 21:23:21,948 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = ac983977bb4a0d6da9b41998d46a2ceb9de36823ea237ced40a76df1c67bf6af12daf1b1679fd397178864af5f95be26f1afe751b0719c7ddd46ca57e3affb3e_0
2025-05-11 21:23:21,952 - semgrep.rule_match - DEBUG - match_key = ('\n        // Función global para abrir el chatbot (accesible desde cualquier parte de la aplicación)\n        function abrirChatbot() {\n            const floatingChat = document.getElementById(\'floatingChat\');\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            \n            if (floatingChat) {\n                floatingChat.classList.add(\'show-chat\');\n                if (floatingChatInput) {\n                    setTimeout(function() {\n                        floatingChatInput.focus();\n                    }, 100);\n                }\n            }\n        }\n        \n        // Función global para seleccionar una pregunta sugerida y enviarla automáticamente\n        function seleccionarPreguntaSugerida(elemento) {\n            // Obtener el texto de la pregunta\n            const pregunta = elemento.textContent.trim();\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            console.log("Pregunta seleccionada:", pregunta);\n            \n            // Colocar la pregunta en el campo de entrada\n            if (floatingChatInput) {\n                floatingChatInput.value = pregunta;\n            }\n            \n            // Añadir la pregunta como mensaje del usuario (definir en caso de que no exista)\n            if (typeof agregarMensajeUsuario !== \'function\') {\n                function agregarMensajeUsuario(texto) {\n                    const mensajeHTML = `\n                        <div class="chat-message user">\n                            <div class="d-flex align-items-start justify-content-end">\n                                <div class="text-end">\n                                    <p class="mb-0">${texto}</p>\n                                </div>\n                                <div class="ms-2 mt-1">\n                                    <i class="fas fa-user text-primary"></i>\n                                </div>\n                            </div>\n                        </div>\n                    `;\n                    \n                    if (floatingChatBody) {\n                        floatingChatBody.innerHTML += mensajeHTML;\n                        floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                    }\n                }\n            }\n            \n            // Añadir mensaje del usuario\n            agregarMensajeUsuario(pregunta);\n            \n            // Limpiar el campo de entrada después de enviar\n            if (floatingChatInput) {\n                floatingChatInput.value = \'\';\n            }\n            \n            // Enviar la pregunta al servidor\n            fetch(\'/chatbot/consulta\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({ pregunta: pregunta })\n            })\n            .then(response => response.json())\n            .then(data => {\n                // Añadir respuesta del bot\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-success"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">${data.respuesta}</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                if (floatingChatBody) {\n                    floatingChatBody.innerHTML += mensajeHTML;\n                    floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                    \n                    // Mostrar nuevas preguntas sugeridas\n                    setTimeout(function() {\n                        mostrarNuevasSugerencias();\n                    }, 500);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error al consultar chatbot:\', error);\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-success"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, intenta de nuevo más tarde.</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                if (floatingChatBody) {\n                    floatingChatBody.innerHTML += mensajeHTML;\n                    floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                }\n            });\n        }\n        \n        // Función para mostrar nuevas sugerencias\n        function mostrarNuevasSugerencias() {\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            // Eliminar sugerencias anteriores si existen\n            document.querySelectorAll(\'.chat-suggestion-new\').forEach(el => {\n                el.remove();\n            });\n            \n            // Preguntas sugeridas\n            const sugerencias = [\n                "¿Qué sistema de energía renovable es más económico?",\n                "¿Cuánto puedo ahorrar con energía renovable?",\n                "¿Para qué sirve el simulador?",\n                "¿Qué es un termotanque solar?"\n            ];\n            \n            // Crear HTML para sugerencias\n            const sugerenciasHTML = `\n                <div class="chat-suggestions mt-3 chat-suggestion-new">\n                    <div class="small text-muted mb-2">¿Te gustaría saber más sobre:</div>\n                    <div class="d-flex flex-wrap gap-2">\n                        ${sugerencias.map(sugerencia => \n                            `<span class="chat-suggestion-pill" onclick="seleccionarPreguntaSugerida(this)">\n                                ${sugerencia}\n                            </span>`\n                        ).join(\'\')}\n                    </div>\n                </div>\n            `;\n            \n            if (floatingChatBody) {\n                floatingChatBody.innerHTML += sugerenciasHTML;\n                floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n            }\n        }\n        \n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const chatIcon = document.getElementById(\'chatIcon\');\n            const floatingChat = document.getElementById(\'floatingChat\');\n            const closeChat = document.getElementById(\'closeChat\');\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            const sendFloatingChat = document.getElementById(\'sendFloatingChat\');\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            // Abrir chat\n            chatIcon.addEventListener(\'click\', function() {\n                abrirChatbot();\n            });\n            \n            // Cerrar chat\n            closeChat.addEventListener(\'click\', function() {\n                floatingChat.classList.remove(\'show-chat\');\n            });\n            \n            // Función para agregar mensaje del usuario\n            function agregarMensajeUsuario(texto) {\n                const mensajeHTML = `\n                    <div class="chat-message user">\n                        <div class="d-flex align-items-start">\n                            <div>\n                                <p class="mb-0">${texto}</p>\n                            </div>\n                            <div class="ms-2 mt-1">\n                                <i class="fas fa-user text-primary"></i>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                scrollToBottom();\n            }\n            \n            // Función para agregar mensaje del bot\n            function agregarMensajeBot(texto) {\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-info"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">${texto}</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                \n                // Después de cada respuesta, mostrar sugerencias de preguntas relacionadas\n                mostrarSugerenciasPreguntas();\n                \n                scrollToBottom();\n            }\n            \n            // Ahora usamos la función mostrarNuevasSugerencias definida globalmente\n            \n            // Función para obtener sugerencias contextuales (rotamos categorías)\n            function obtenerSugerenciasContextuales() {\n                const todasLasSugerencias = {\n                    solar: [\n                        "¿Cuántos paneles solares necesito para mi casa?",\n                        "¿Cómo funcionan los paneles fotovoltaicos?",\n                        "¿Cuál es la vida útil de los paneles solares?"\n                    ],\n                    eolica: [\n                        "¿Funciona la energía eólica en zonas urbanas?",\n                        "¿Qué condiciones de viento se necesitan?",\n                        "¿Es ruidoso un aerogenerador doméstico?"\n                    ],\n                    termotanque: [\n                        "¿En qué se diferencia un termotanque solar de los paneles?",\n                        "¿Qué mantenimiento necesita un termotanque solar?",\n                        "¿Funciona en días nublados?"\n                    ],\n                    economia: [\n                        "¿Existen incentivos fiscales para energías renovables?",\n                        "¿Cuánto tiempo toma recuperar la inversión?",\n                        "¿Puedo vender energía a la red eléctrica?"\n                    ],\n                    instalacion: [\n                        "¿Qué permisos necesito para instalar paneles solares?",\n                        "¿Cuánto tiempo toma la instalación?",\n                        "¿Puedo instalar sistemas renovables en un apartamento?"\n                    ]\n                };\n                \n                // Seleccionar 2-3 categorías aleatorias\n                const categorias = Object.keys(todasLasSugerencias);\n                const categoriasSugeridas = [];\n                \n                while (categoriasSugeridas.length < 2) {\n                    const categoriaAleatoria = categorias[Math.floor(Math.random() * categorias.length)];\n                    if (!categoriasSugeridas.includes(categoriaAleatoria)) {\n                        categoriasSugeridas.push(categoriaAleatoria);\n                    }\n                }\n                \n                // Seleccionar 1 pregunta aleatoria de cada categoría seleccionada\n                const preguntasSugeridas = [];\n                categoriasSugeridas.forEach(categoria => {\n                    const preguntasCategoria = todasLasSugerencias[categoria];\n                    const preguntaAleatoria = preguntasCategoria[Math.floor(Math.random() * preguntasCategoria.length)];\n                    preguntasSugeridas.push(preguntaAleatoria);\n                });\n                \n                // Añadir 1-2 preguntas adicionales específicas\n                preguntasSugeridas.push("¿Qué sistema de energía renovable es más económico?");\n                \n                return preguntasSugeridas;\n            }\n            \n            // La función seleccionarPreguntaSugerida ya está definida globalmente\n            \n            // Función para mostrar indicador de escritura\n            function mostrarEscribiendo() {\n                const mensajeHTML = `\n                    <div class="chat-message bot" id="typing-message">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-info"></i>\n                            </div>\n                            <div class="typing-indicator">\n                                <span></span>\n                                <span></span>\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                scrollToBottom();\n            }\n            \n            // Función para quitar indicador de escritura\n            function quitarEscribiendo() {\n                const typingMessage = document.getElementById(\'typing-message\');\n                if (typingMessage) {\n                    typingMessage.remove();\n                }\n            }\n            \n            // Función para hacer scroll hasta el final del chat\n            function scrollToBottom() {\n                floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n            }\n            \n            // Función para enviar pregunta al servidor\n            function enviarPregunta() {\n                const pregunta = floatingChatInput.value.trim();\n                if (pregunta === \'\') return;\n                \n                // Agregar mensaje del usuario al chat\n                agregarMensajeUsuario(pregunta);\n                \n                // Limpiar input\n                floatingChatInput.value = \'\';\n                \n                // Mostrar indicador de escritura\n                mostrarEscribiendo();\n                \n                console.log("Enviando pregunta al chatbot:", pregunta);\n                \n                // Enviar pregunta a la API\n                fetch(\'{{ url_for(\'chatbot.consulta_chatbot\') }}\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({ pregunta: pregunta }),\n                })\n                .then(response => {\n                    console.log("Respuesta recibida:", response);\n                    return response.json();\n                })\n                .then(data => {\n                    console.log("Datos de respuesta:", data);\n                    // Quitar indicador de escritura\n                    quitarEscribiendo();\n                    \n                    // Agregar respuesta del bot\n                    agregarMensajeBot(data.respuesta);\n                    \n                    // Mostrar nuevas sugerencias después de un breve retraso\n                    setTimeout(function() {\n                        mostrarNuevasSugerencias();\n                    }, 500);\n                })\n                .catch(error => {\n                    console.error(\'Error en consulta chatbot:\', error);\n                    quitarEscribiendo();\n                    agregarMensajeBot(\'Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, inténtalo de nuevo más tarde.\');\n                });\n            }\n            \n            // Event listeners\n            sendFloatingChat.addEventListener(\'click\', enviarPregunta);\n            \n            floatingChatInput.addEventListener(\'keypress\', function(e) {\n                if (e.key === \'Enter\' && !e.shiftKey) {\n                    e.preventDefault();\n                    enviarPregunta();\n                }\n            });\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Función global para abrir el chatbot (accesible desde cualquier parte de la aplicación)\n        function abrirChatbot() {\n            const floatingChat = document.getElementById(\'floatingChat\');\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            \n            if (floatingChat) {\n                floatingChat.classList.add(\'show-chat\');\n                if (floatingChatInput) {\n                    setTimeout(function() {\n                        floatingChatInput.focus();\n                    }, 100);\n                }\n            }\n        }\n        \n        // Función global para seleccionar una pregunta sugerida y enviarla automáticamente\n        function seleccionarPreguntaSugerida(elemento) {\n            // Obtener el texto de la pregunta\n            const pregunta = elemento.textContent.trim();\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            console.log("Pregunta seleccionada:", pregunta);\n            \n            // Colocar la pregunta en el campo de entrada\n            if (floatingChatInput) {\n                floatingChatInput.value = pregunta;\n            }\n            \n            // Añadir la pregunta como mensaje del usuario (definir en caso de que no exista)\n            if (typeof agregarMensajeUsuario !== \'function\') {\n                function agregarMensajeUsuario(texto) {\n                    const mensajeHTML = `\n                        <div class="chat-message user">\n                            <div class="d-flex align-items-start justify-content-end">\n                                <div class="text-end">\n                                    <p class="mb-0">${texto}</p>\n                                </div>\n                                <div class="ms-2 mt-1">\n                                    <i class="fas fa-user text-primary"></i>\n                                </div>\n                            </div>\n                        </div>\n                    `;\n                    \n                    if (floatingChatBody) {\n                        floatingChatBody.innerHTML += mensajeHTML;\n                        floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                    }\n                }\n            }\n            \n            // Añadir mensaje del usuario\n            agregarMensajeUsuario(pregunta);\n            \n            // Limpiar el campo de entrada después de enviar\n            if (floatingChatInput) {\n                floatingChatInput.value = \'\';\n            }\n            \n            // Enviar la pregunta al servidor\n            fetch(\'/chatbot/consulta\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({ pregunta: pregunta })\n            })\n            .then(response => response.json())\n            .then(data => {\n                // Añadir respuesta del bot\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-success"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">${data.respuesta}</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                if (floatingChatBody) {\n                    floatingChatBody.innerHTML += mensajeHTML;\n                    floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                    \n                    // Mostrar nuevas preguntas sugeridas\n                    setTimeout(function() {\n                        mostrarNuevasSugerencias();\n                    }, 500);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error al consultar chatbot:\', error);\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-success"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, intenta de nuevo más tarde.</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                if (floatingChatBody) {\n                    floatingChatBody.innerHTML += mensajeHTML;\n                    floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                }\n            });\n        }\n        \n        // Función para mostrar nuevas sugerencias\n        function mostrarNuevasSugerencias() {\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            // Eliminar sugerencias anteriores si existen\n            document.querySelectorAll(\'.chat-suggestion-new\').forEach(el => {\n                el.remove();\n            });\n            \n            // Preguntas sugeridas\n            const sugerencias = [\n                "¿Qué sistema de energía renovable es más económico?",\n                "¿Cuánto puedo ahorrar con energía renovable?",\n                "¿Para qué sirve el simulador?",\n                "¿Qué es un termotanque solar?"\n            ];\n            \n            // Crear HTML para sugerencias\n            const sugerenciasHTML = `\n                <div class="chat-suggestions mt-3 chat-suggestion-new">\n                    <div class="small text-muted mb-2">¿Te gustaría saber más sobre:</div>\n                    <div class="d-flex flex-wrap gap-2">\n                        ${sugerencias.map(sugerencia => \n                            `<span class="chat-suggestion-pill" onclick="seleccionarPreguntaSugerida(this)">\n                                ${sugerencia}\n                            </span>`\n                        ).join(\'\')}\n                    </div>\n                </div>\n            `;\n            \n            if (floatingChatBody) {\n                floatingChatBody.innerHTML += sugerenciasHTML;\n                floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n            }\n        }\n        \n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const chatIcon = document.getElementById(\'chatIcon\');\n            const floatingChat = document.getElementById(\'floatingChat\');\n            const closeChat = document.getElementById(\'closeChat\');\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            const sendFloatingChat = document.getElementById(\'sendFloatingChat\');\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            // Abrir chat\n            chatIcon.addEventListener(\'click\', function() {\n                abrirChatbot();\n            });\n            \n            // Cerrar chat\n            closeChat.addEventListener(\'click\', function() {\n                floatingChat.classList.remove(\'show-chat\');\n            });\n            \n            // Función para agregar mensaje del usuario\n            function agregarMensajeUsuario(texto) {\n                const mensajeHTML = `\n                    <div class="chat-message user">\n                        <div class="d-flex align-items-start">\n                            <div>\n                                <p class="mb-0">${texto}</p>\n                            </div>\n                            <div class="ms-2 mt-1">\n                                <i class="fas fa-user text-primary"></i>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                scrollToBottom();\n            }\n            \n            // Función para agregar mensaje del bot\n            function agregarMensajeBot(texto) {\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-info"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">${texto}</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                \n                // Después de cada respuesta, mostrar sugerencias de preguntas relacionadas\n                mostrarSugerenciasPreguntas();\n                \n                scrollToBottom();\n            }\n            \n            // Ahora usamos la función mostrarNuevasSugerencias definida globalmente\n            \n            // Función para obtener sugerencias contextuales (rotamos categorías)\n            function obtenerSugerenciasContextuales() {\n                const todasLasSugerencias = {\n                    solar: [\n                        "¿Cuántos paneles solares necesito para mi casa?",\n                        "¿Cómo funcionan los paneles fotovoltaicos?",\n                        "¿Cuál es la vida útil de los paneles solares?"\n                    ],\n                    eolica: [\n                        "¿Funciona la energía eólica en zonas urbanas?",\n                        "¿Qué condiciones de viento se necesitan?",\n                        "¿Es ruidoso un aerogenerador doméstico?"\n                    ],\n                    termotanque: [\n                        "¿En qué se diferencia un termotanque solar de los paneles?",\n                        "¿Qué mantenimiento necesita un termotanque solar?",\n                        "¿Funciona en días nublados?"\n                    ],\n                    economia: [\n                        "¿Existen incentivos fiscales para energías renovables?",\n                        "¿Cuánto tiempo toma recuperar la inversión?",\n                        "¿Puedo vender energía a la red eléctrica?"\n                    ],\n                    instalacion: [\n                        "¿Qué permisos necesito para instalar paneles solares?",\n                        "¿Cuánto tiempo toma la instalación?",\n                        "¿Puedo instalar sistemas renovables en un apartamento?"\n                    ]\n                };\n                \n                // Seleccionar 2-3 categorías aleatorias\n                const categorias = Object.keys(todasLasSugerencias);\n                const categoriasSugeridas = [];\n                \n                while (categoriasSugeridas.length < 2) {\n                    const categoriaAleatoria = categorias[Math.floor(Math.random() * categorias.length)];\n                    if (!categoriasSugeridas.includes(categoriaAleatoria)) {\n                        categoriasSugeridas.push(categoriaAleatoria);\n                    }\n                }\n                \n                // Seleccionar 1 pregunta aleatoria de cada categoría seleccionada\n                const preguntasSugeridas = [];\n                categoriasSugeridas.forEach(categoria => {\n                    const preguntasCategoria = todasLasSugerencias[categoria];\n                    const preguntaAleatoria = preguntasCategoria[Math.floor(Math.random() * preguntasCategoria.length)];\n                    preguntasSugeridas.push(preguntaAleatoria);\n                });\n                \n                // Añadir 1-2 preguntas adicionales específicas\n                preguntasSugeridas.push("¿Qué sistema de energía renovable es más económico?");\n                \n                return preguntasSugeridas;\n            }\n            \n            // La función seleccionarPreguntaSugerida ya está definida globalmente\n            \n            // Función para mostrar indicador de escritura\n            function mostrarEscribiendo() {\n                const mensajeHTML = `\n                    <div class="chat-message bot" id="typing-message">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-info"></i>\n                            </div>\n                            <div class="typing-indicator">\n                                <span></span>\n                                <span></span>\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                scrollToBottom();\n            }\n            \n            // Función para quitar indicador de escritura\n            function quitarEscribiendo() {\n                const typingMessage = document.getElementById(\'typing-message\');\n                if (typingMessage) {\n                    typingMessage.remove();\n                }\n            }\n            \n            // Función para hacer scroll hasta el final del chat\n            function scrollToBottom() {\n                floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n            }\n            \n            // Función para enviar pregunta al servidor\n            function enviarPregunta() {\n                const pregunta = floatingChatInput.value.trim();\n                if (pregunta === \'\') return;\n                \n                // Agregar mensaje del usuario al chat\n                agregarMensajeUsuario(pregunta);\n                \n                // Limpiar input\n                floatingChatInput.value = \'\';\n                \n                // Mostrar indicador de escritura\n                mostrarEscribiendo();\n                \n                console.log("Enviando pregunta al chatbot:", pregunta);\n                \n                // Enviar pregunta a la API\n                fetch(\'{{ url_for(\'chatbot.consulta_chatbot\') }}\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({ pregunta: pregunta }),\n                })\n                .then(response => {\n                    console.log("Respuesta recibida:", response);\n                    return response.json();\n                })\n                .then(data => {\n                    console.log("Datos de respuesta:", data);\n                    // Quitar indicador de escritura\n                    quitarEscribiendo();\n                    \n                    // Agregar respuesta del bot\n                    agregarMensajeBot(data.respuesta);\n                    \n                    // Mostrar nuevas sugerencias después de un breve retraso\n                    setTimeout(function() {\n                        mostrarNuevasSugerencias();\n                    }, 500);\n                })\n                .catch(error => {\n                    console.error(\'Error en consulta chatbot:\', error);\n                    quitarEscribiendo();\n                    agregarMensajeBot(\'Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, inténtalo de nuevo más tarde.\');\n                });\n            }\n            \n            // Event listeners\n            sendFloatingChat.addEventListener(\'click\', enviarPregunta);\n            \n            floatingChatInput.addEventListener(\'keypress\', function(e) {\n                if (e.key === \'Enter\' && !e.shiftKey) {\n                    e.preventDefault();\n                    enviarPregunta();\n                }\n            });\n        });\n    </script>\n', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = d9b6a5aa6b1d45fbe389466b3069fefe090ad156d1a849f65d9affd1824efdec5bb5f9caa333cb165b8da25a10afebfdcb33b3b41d9459dde761730bc3296480_0
2025-05-11 21:23:21,955 - semgrep.rule_match - DEBUG - match_key = ('\n        // Función global para abrir el chatbot (accesible desde cualquier parte de la aplicación)\n        function abrirChatbot() {\n            const floatingChat = document.getElementById(\'floatingChat\');\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            \n            if (floatingChat) {\n                floatingChat.classList.add(\'show-chat\');\n                if (floatingChatInput) {\n                    setTimeout(function() {\n                        floatingChatInput.focus();\n                    }, 100);\n                }\n            }\n        }\n        \n        // Función global para seleccionar una pregunta sugerida y enviarla automáticamente\n        function seleccionarPreguntaSugerida(elemento) {\n            // Obtener el texto de la pregunta\n            const pregunta = elemento.textContent.trim();\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            console.log("Pregunta seleccionada:", pregunta);\n            \n            // Colocar la pregunta en el campo de entrada\n            if (floatingChatInput) {\n                floatingChatInput.value = pregunta;\n            }\n            \n            // Añadir la pregunta como mensaje del usuario (definir en caso de que no exista)\n            if (typeof agregarMensajeUsuario !== \'function\') {\n                function agregarMensajeUsuario(texto) {\n                    const mensajeHTML = `\n                        <div class="chat-message user">\n                            <div class="d-flex align-items-start justify-content-end">\n                                <div class="text-end">\n                                    <p class="mb-0">${texto}</p>\n                                </div>\n                                <div class="ms-2 mt-1">\n                                    <i class="fas fa-user text-primary"></i>\n                                </div>\n                            </div>\n                        </div>\n                    `;\n                    \n                    if (floatingChatBody) {\n                        floatingChatBody.innerHTML += mensajeHTML;\n                        floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                    }\n                }\n            }\n            \n            // Añadir mensaje del usuario\n            agregarMensajeUsuario(pregunta);\n            \n            // Limpiar el campo de entrada después de enviar\n            if (floatingChatInput) {\n                floatingChatInput.value = \'\';\n            }\n            \n            // Enviar la pregunta al servidor\n            fetch(\'/chatbot/consulta\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({ pregunta: pregunta })\n            })\n            .then(response => response.json())\n            .then(data => {\n                // Añadir respuesta del bot\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-success"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">${data.respuesta}</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                if (floatingChatBody) {\n                    floatingChatBody.innerHTML += mensajeHTML;\n                    floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                    \n                    // Mostrar nuevas preguntas sugeridas\n                    setTimeout(function() {\n                        mostrarNuevasSugerencias();\n                    }, 500);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error al consultar chatbot:\', error);\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-success"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, intenta de nuevo más tarde.</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                if (floatingChatBody) {\n                    floatingChatBody.innerHTML += mensajeHTML;\n                    floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                }\n            });\n        }\n        \n        // Función para mostrar nuevas sugerencias\n        function mostrarNuevasSugerencias() {\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            // Eliminar sugerencias anteriores si existen\n            document.querySelectorAll(\'.chat-suggestion-new\').forEach(el => {\n                el.remove();\n            });\n            \n            // Preguntas sugeridas\n            const sugerencias = [\n                "¿Qué sistema de energía renovable es más económico?",\n                "¿Cuánto puedo ahorrar con energía renovable?",\n                "¿Para qué sirve el simulador?",\n                "¿Qué es un termotanque solar?"\n            ];\n            \n            // Crear HTML para sugerencias\n            const sugerenciasHTML = `\n                <div class="chat-suggestions mt-3 chat-suggestion-new">\n                    <div class="small text-muted mb-2">¿Te gustaría saber más sobre:</div>\n                    <div class="d-flex flex-wrap gap-2">\n                        ${sugerencias.map(sugerencia => \n                            `<span class="chat-suggestion-pill" onclick="seleccionarPreguntaSugerida(this)">\n                                ${sugerencia}\n                            </span>`\n                        ).join(\'\')}\n                    </div>\n                </div>\n            `;\n            \n            if (floatingChatBody) {\n                floatingChatBody.innerHTML += sugerenciasHTML;\n                floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n            }\n        }\n        \n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const chatIcon = document.getElementById(\'chatIcon\');\n            const floatingChat = document.getElementById(\'floatingChat\');\n            const closeChat = document.getElementById(\'closeChat\');\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            const sendFloatingChat = document.getElementById(\'sendFloatingChat\');\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            // Abrir chat\n            chatIcon.addEventListener(\'click\', function() {\n                abrirChatbot();\n            });\n            \n            // Cerrar chat\n            closeChat.addEventListener(\'click\', function() {\n                floatingChat.classList.remove(\'show-chat\');\n            });\n            \n            // Función para agregar mensaje del usuario\n            function agregarMensajeUsuario(texto) {\n                const mensajeHTML = `\n                    <div class="chat-message user">\n                        <div class="d-flex align-items-start">\n                            <div>\n                                <p class="mb-0">${texto}</p>\n                            </div>\n                            <div class="ms-2 mt-1">\n                                <i class="fas fa-user text-primary"></i>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                scrollToBottom();\n            }\n            \n            // Función para agregar mensaje del bot\n            function agregarMensajeBot(texto) {\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-info"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">${texto}</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                \n                // Después de cada respuesta, mostrar sugerencias de preguntas relacionadas\n                mostrarSugerenciasPreguntas();\n                \n                scrollToBottom();\n            }\n            \n            // Ahora usamos la función mostrarNuevasSugerencias definida globalmente\n            \n            // Función para obtener sugerencias contextuales (rotamos categorías)\n            function obtenerSugerenciasContextuales() {\n                const todasLasSugerencias = {\n                    solar: [\n                        "¿Cuántos paneles solares necesito para mi casa?",\n                        "¿Cómo funcionan los paneles fotovoltaicos?",\n                        "¿Cuál es la vida útil de los paneles solares?"\n                    ],\n                    eolica: [\n                        "¿Funciona la energía eólica en zonas urbanas?",\n                        "¿Qué condiciones de viento se necesitan?",\n                        "¿Es ruidoso un aerogenerador doméstico?"\n                    ],\n                    termotanque: [\n                        "¿En qué se diferencia un termotanque solar de los paneles?",\n                        "¿Qué mantenimiento necesita un termotanque solar?",\n                        "¿Funciona en días nublados?"\n                    ],\n                    economia: [\n                        "¿Existen incentivos fiscales para energías renovables?",\n                        "¿Cuánto tiempo toma recuperar la inversión?",\n                        "¿Puedo vender energía a la red eléctrica?"\n                    ],\n                    instalacion: [\n                        "¿Qué permisos necesito para instalar paneles solares?",\n                        "¿Cuánto tiempo toma la instalación?",\n                        "¿Puedo instalar sistemas renovables en un apartamento?"\n                    ]\n                };\n                \n                // Seleccionar 2-3 categorías aleatorias\n                const categorias = Object.keys(todasLasSugerencias);\n                const categoriasSugeridas = [];\n                \n                while (categoriasSugeridas.length < 2) {\n                    const categoriaAleatoria = categorias[Math.floor(Math.random() * categorias.length)];\n                    if (!categoriasSugeridas.includes(categoriaAleatoria)) {\n                        categoriasSugeridas.push(categoriaAleatoria);\n                    }\n                }\n                \n                // Seleccionar 1 pregunta aleatoria de cada categoría seleccionada\n                const preguntasSugeridas = [];\n                categoriasSugeridas.forEach(categoria => {\n                    const preguntasCategoria = todasLasSugerencias[categoria];\n                    const preguntaAleatoria = preguntasCategoria[Math.floor(Math.random() * preguntasCategoria.length)];\n                    preguntasSugeridas.push(preguntaAleatoria);\n                });\n                \n                // Añadir 1-2 preguntas adicionales específicas\n                preguntasSugeridas.push("¿Qué sistema de energía renovable es más económico?");\n                \n                return preguntasSugeridas;\n            }\n            \n            // La función seleccionarPreguntaSugerida ya está definida globalmente\n            \n            // Función para mostrar indicador de escritura\n            function mostrarEscribiendo() {\n                const mensajeHTML = `\n                    <div class="chat-message bot" id="typing-message">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-info"></i>\n                            </div>\n                            <div class="typing-indicator">\n                                <span></span>\n                                <span></span>\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                scrollToBottom();\n            }\n            \n            // Función para quitar indicador de escritura\n            function quitarEscribiendo() {\n                const typingMessage = document.getElementById(\'typing-message\');\n                if (typingMessage) {\n                    typingMessage.remove();\n                }\n            }\n            \n            // Función para hacer scroll hasta el final del chat\n            function scrollToBottom() {\n                floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n            }\n            \n            // Función para enviar pregunta al servidor\n            function enviarPregunta() {\n                const pregunta = floatingChatInput.value.trim();\n                if (pregunta === \'\') return;\n                \n                // Agregar mensaje del usuario al chat\n                agregarMensajeUsuario(pregunta);\n                \n                // Limpiar input\n                floatingChatInput.value = \'\';\n                \n                // Mostrar indicador de escritura\n                mostrarEscribiendo();\n                \n                console.log("Enviando pregunta al chatbot:", pregunta);\n                \n                // Enviar pregunta a la API\n                fetch(\'{{ url_for(\'chatbot.consulta_chatbot\') }}\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({ pregunta: pregunta }),\n                })\n                .then(response => {\n                    console.log("Respuesta recibida:", response);\n                    return response.json();\n                })\n                .then(data => {\n                    console.log("Datos de respuesta:", data);\n                    // Quitar indicador de escritura\n                    quitarEscribiendo();\n                    \n                    // Agregar respuesta del bot\n                    agregarMensajeBot(data.respuesta);\n                    \n                    // Mostrar nuevas sugerencias después de un breve retraso\n                    setTimeout(function() {\n                        mostrarNuevasSugerencias();\n                    }, 500);\n                })\n                .catch(error => {\n                    console.error(\'Error en consulta chatbot:\', error);\n                    quitarEscribiendo();\n                    agregarMensajeBot(\'Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, inténtalo de nuevo más tarde.\');\n                });\n            }\n            \n            // Event listeners\n            sendFloatingChat.addEventListener(\'click\', enviarPregunta);\n            \n            floatingChatInput.addEventListener(\'keypress\', function(e) {\n                if (e.key === \'Enter\' && !e.shiftKey) {\n                    e.preventDefault();\n                    enviarPregunta();\n                }\n            });\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Función global para abrir el chatbot (accesible desde cualquier parte de la aplicación)\n        function abrirChatbot() {\n            const floatingChat = document.getElementById(\'floatingChat\');\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            \n            if (floatingChat) {\n                floatingChat.classList.add(\'show-chat\');\n                if (floatingChatInput) {\n                    setTimeout(function() {\n                        floatingChatInput.focus();\n                    }, 100);\n                }\n            }\n        }\n        \n        // Función global para seleccionar una pregunta sugerida y enviarla automáticamente\n        function seleccionarPreguntaSugerida(elemento) {\n            // Obtener el texto de la pregunta\n            const pregunta = elemento.textContent.trim();\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            console.log("Pregunta seleccionada:", pregunta);\n            \n            // Colocar la pregunta en el campo de entrada\n            if (floatingChatInput) {\n                floatingChatInput.value = pregunta;\n            }\n            \n            // Añadir la pregunta como mensaje del usuario (definir en caso de que no exista)\n            if (typeof agregarMensajeUsuario !== \'function\') {\n                function agregarMensajeUsuario(texto) {\n                    const mensajeHTML = `\n                        <div class="chat-message user">\n                            <div class="d-flex align-items-start justify-content-end">\n                                <div class="text-end">\n                                    <p class="mb-0">${texto}</p>\n                                </div>\n                                <div class="ms-2 mt-1">\n                                    <i class="fas fa-user text-primary"></i>\n                                </div>\n                            </div>\n                        </div>\n                    `;\n                    \n                    if (floatingChatBody) {\n                        floatingChatBody.innerHTML += mensajeHTML;\n                        floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                    }\n                }\n            }\n            \n            // Añadir mensaje del usuario\n            agregarMensajeUsuario(pregunta);\n            \n            // Limpiar el campo de entrada después de enviar\n            if (floatingChatInput) {\n                floatingChatInput.value = \'\';\n            }\n            \n            // Enviar la pregunta al servidor\n            fetch(\'/chatbot/consulta\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({ pregunta: pregunta })\n            })\n            .then(response => response.json())\n            .then(data => {\n                // Añadir respuesta del bot\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-success"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">${data.respuesta}</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                if (floatingChatBody) {\n                    floatingChatBody.innerHTML += mensajeHTML;\n                    floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                    \n                    // Mostrar nuevas preguntas sugeridas\n                    setTimeout(function() {\n                        mostrarNuevasSugerencias();\n                    }, 500);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error al consultar chatbot:\', error);\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-success"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, intenta de nuevo más tarde.</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                if (floatingChatBody) {\n                    floatingChatBody.innerHTML += mensajeHTML;\n                    floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                }\n            });\n        }\n        \n        // Función para mostrar nuevas sugerencias\n        function mostrarNuevasSugerencias() {\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            // Eliminar sugerencias anteriores si existen\n            document.querySelectorAll(\'.chat-suggestion-new\').forEach(el => {\n                el.remove();\n            });\n            \n            // Preguntas sugeridas\n            const sugerencias = [\n                "¿Qué sistema de energía renovable es más económico?",\n                "¿Cuánto puedo ahorrar con energía renovable?",\n                "¿Para qué sirve el simulador?",\n                "¿Qué es un termotanque solar?"\n            ];\n            \n            // Crear HTML para sugerencias\n            const sugerenciasHTML = `\n                <div class="chat-suggestions mt-3 chat-suggestion-new">\n                    <div class="small text-muted mb-2">¿Te gustaría saber más sobre:</div>\n                    <div class="d-flex flex-wrap gap-2">\n                        ${sugerencias.map(sugerencia => \n                            `<span class="chat-suggestion-pill" onclick="seleccionarPreguntaSugerida(this)">\n                                ${sugerencia}\n                            </span>`\n                        ).join(\'\')}\n                    </div>\n                </div>\n            `;\n            \n            if (floatingChatBody) {\n                floatingChatBody.innerHTML += sugerenciasHTML;\n                floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n            }\n        }\n        \n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const chatIcon = document.getElementById(\'chatIcon\');\n            const floatingChat = document.getElementById(\'floatingChat\');\n            const closeChat = document.getElementById(\'closeChat\');\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            const sendFloatingChat = document.getElementById(\'sendFloatingChat\');\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            // Abrir chat\n            chatIcon.addEventListener(\'click\', function() {\n                abrirChatbot();\n            });\n            \n            // Cerrar chat\n            closeChat.addEventListener(\'click\', function() {\n                floatingChat.classList.remove(\'show-chat\');\n            });\n            \n            // Función para agregar mensaje del usuario\n            function agregarMensajeUsuario(texto) {\n                const mensajeHTML = `\n                    <div class="chat-message user">\n                        <div class="d-flex align-items-start">\n                            <div>\n                                <p class="mb-0">${texto}</p>\n                            </div>\n                            <div class="ms-2 mt-1">\n                                <i class="fas fa-user text-primary"></i>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                scrollToBottom();\n            }\n            \n            // Función para agregar mensaje del bot\n            function agregarMensajeBot(texto) {\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-info"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">${texto}</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                \n                // Después de cada respuesta, mostrar sugerencias de preguntas relacionadas\n                mostrarSugerenciasPreguntas();\n                \n                scrollToBottom();\n            }\n            \n            // Ahora usamos la función mostrarNuevasSugerencias definida globalmente\n            \n            // Función para obtener sugerencias contextuales (rotamos categorías)\n            function obtenerSugerenciasContextuales() {\n                const todasLasSugerencias = {\n                    solar: [\n                        "¿Cuántos paneles solares necesito para mi casa?",\n                        "¿Cómo funcionan los paneles fotovoltaicos?",\n                        "¿Cuál es la vida útil de los paneles solares?"\n                    ],\n                    eolica: [\n                        "¿Funciona la energía eólica en zonas urbanas?",\n                        "¿Qué condiciones de viento se necesitan?",\n                        "¿Es ruidoso un aerogenerador doméstico?"\n                    ],\n                    termotanque: [\n                        "¿En qué se diferencia un termotanque solar de los paneles?",\n                        "¿Qué mantenimiento necesita un termotanque solar?",\n                        "¿Funciona en días nublados?"\n                    ],\n                    economia: [\n                        "¿Existen incentivos fiscales para energías renovables?",\n                        "¿Cuánto tiempo toma recuperar la inversión?",\n                        "¿Puedo vender energía a la red eléctrica?"\n                    ],\n                    instalacion: [\n                        "¿Qué permisos necesito para instalar paneles solares?",\n                        "¿Cuánto tiempo toma la instalación?",\n                        "¿Puedo instalar sistemas renovables en un apartamento?"\n                    ]\n                };\n                \n                // Seleccionar 2-3 categorías aleatorias\n                const categorias = Object.keys(todasLasSugerencias);\n                const categoriasSugeridas = [];\n                \n                while (categoriasSugeridas.length < 2) {\n                    const categoriaAleatoria = categorias[Math.floor(Math.random() * categorias.length)];\n                    if (!categoriasSugeridas.includes(categoriaAleatoria)) {\n                        categoriasSugeridas.push(categoriaAleatoria);\n                    }\n                }\n                \n                // Seleccionar 1 pregunta aleatoria de cada categoría seleccionada\n                const preguntasSugeridas = [];\n                categoriasSugeridas.forEach(categoria => {\n                    const preguntasCategoria = todasLasSugerencias[categoria];\n                    const preguntaAleatoria = preguntasCategoria[Math.floor(Math.random() * preguntasCategoria.length)];\n                    preguntasSugeridas.push(preguntaAleatoria);\n                });\n                \n                // Añadir 1-2 preguntas adicionales específicas\n                preguntasSugeridas.push("¿Qué sistema de energía renovable es más económico?");\n                \n                return preguntasSugeridas;\n            }\n            \n            // La función seleccionarPreguntaSugerida ya está definida globalmente\n            \n            // Función para mostrar indicador de escritura\n            function mostrarEscribiendo() {\n                const mensajeHTML = `\n                    <div class="chat-message bot" id="typing-message">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-info"></i>\n                            </div>\n                            <div class="typing-indicator">\n                                <span></span>\n                                <span></span>\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                scrollToBottom();\n            }\n            \n            // Función para quitar indicador de escritura\n            function quitarEscribiendo() {\n                const typingMessage = document.getElementById(\'typing-message\');\n                if (typingMessage) {\n                    typingMessage.remove();\n                }\n            }\n            \n            // Función para hacer scroll hasta el final del chat\n            function scrollToBottom() {\n                floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n            }\n            \n            // Función para enviar pregunta al servidor\n            function enviarPregunta() {\n                const pregunta = floatingChatInput.value.trim();\n                if (pregunta === \'\') return;\n                \n                // Agregar mensaje del usuario al chat\n                agregarMensajeUsuario(pregunta);\n                \n                // Limpiar input\n                floatingChatInput.value = \'\';\n                \n                // Mostrar indicador de escritura\n                mostrarEscribiendo();\n                \n                console.log("Enviando pregunta al chatbot:", pregunta);\n                \n                // Enviar pregunta a la API\n                fetch(\'{{ url_for(\'chatbot.consulta_chatbot\') }}\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({ pregunta: pregunta }),\n                })\n                .then(response => {\n                    console.log("Respuesta recibida:", response);\n                    return response.json();\n                })\n                .then(data => {\n                    console.log("Datos de respuesta:", data);\n                    // Quitar indicador de escritura\n                    quitarEscribiendo();\n                    \n                    // Agregar respuesta del bot\n                    agregarMensajeBot(data.respuesta);\n                    \n                    // Mostrar nuevas sugerencias después de un breve retraso\n                    setTimeout(function() {\n                        mostrarNuevasSugerencias();\n                    }, 500);\n                })\n                .catch(error => {\n                    console.error(\'Error en consulta chatbot:\', error);\n                    quitarEscribiendo();\n                    agregarMensajeBot(\'Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, inténtalo de nuevo más tarde.\');\n                });\n            }\n            \n            // Event listeners\n            sendFloatingChat.addEventListener(\'click\', enviarPregunta);\n            \n            floatingChatInput.addEventListener(\'keypress\', function(e) {\n                if (e.key === \'Enter\' && !e.shiftKey) {\n                    e.preventDefault();\n                    enviarPregunta();\n                }\n            });\n        });\n    </script>\n', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = d9b6a5aa6b1d45fbe389466b3069fefe090ad156d1a849f65d9affd1824efdec5bb5f9caa333cb165b8da25a10afebfdcb33b3b41d9459dde761730bc3296480_0
2025-05-11 21:23:21,959 - semgrep.rule_match - DEBUG - match_key = ('\n        // Función global para abrir el chatbot (accesible desde cualquier parte de la aplicación)\n        function abrirChatbot() {\n            const floatingChat = document.getElementById(\'floatingChat\');\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            \n            if (floatingChat) {\n                floatingChat.classList.add(\'show-chat\');\n                if (floatingChatInput) {\n                    setTimeout(function() {\n                        floatingChatInput.focus();\n                    }, 100);\n                }\n            }\n        }\n        \n        // Función global para seleccionar una pregunta sugerida y enviarla automáticamente\n        function seleccionarPreguntaSugerida(elemento) {\n            // Obtener el texto de la pregunta\n            const pregunta = elemento.textContent.trim();\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            console.log("Pregunta seleccionada:", pregunta);\n            \n            // Colocar la pregunta en el campo de entrada\n            if (floatingChatInput) {\n                floatingChatInput.value = pregunta;\n            }\n            \n            // Añadir la pregunta como mensaje del usuario (definir en caso de que no exista)\n            if (typeof agregarMensajeUsuario !== \'function\') {\n                function agregarMensajeUsuario(texto) {\n                    const mensajeHTML = `\n                        <div class="chat-message user">\n                            <div class="d-flex align-items-start justify-content-end">\n                                <div class="text-end">\n                                    <p class="mb-0">${texto}</p>\n                                </div>\n                                <div class="ms-2 mt-1">\n                                    <i class="fas fa-user text-primary"></i>\n                                </div>\n                            </div>\n                        </div>\n                    `;\n                    \n                    if (floatingChatBody) {\n                        floatingChatBody.innerHTML += mensajeHTML;\n                        floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                    }\n                }\n            }\n            \n            // Añadir mensaje del usuario\n            agregarMensajeUsuario(pregunta);\n            \n            // Limpiar el campo de entrada después de enviar\n            if (floatingChatInput) {\n                floatingChatInput.value = \'\';\n            }\n            \n            // Enviar la pregunta al servidor\n            fetch(\'/chatbot/consulta\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({ pregunta: pregunta })\n            })\n            .then(response => response.json())\n            .then(data => {\n                // Añadir respuesta del bot\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-success"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">${data.respuesta}</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                if (floatingChatBody) {\n                    floatingChatBody.innerHTML += mensajeHTML;\n                    floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                    \n                    // Mostrar nuevas preguntas sugeridas\n                    setTimeout(function() {\n                        mostrarNuevasSugerencias();\n                    }, 500);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error al consultar chatbot:\', error);\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-success"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, intenta de nuevo más tarde.</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                if (floatingChatBody) {\n                    floatingChatBody.innerHTML += mensajeHTML;\n                    floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                }\n            });\n        }\n        \n        // Función para mostrar nuevas sugerencias\n        function mostrarNuevasSugerencias() {\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            // Eliminar sugerencias anteriores si existen\n            document.querySelectorAll(\'.chat-suggestion-new\').forEach(el => {\n                el.remove();\n            });\n            \n            // Preguntas sugeridas\n            const sugerencias = [\n                "¿Qué sistema de energía renovable es más económico?",\n                "¿Cuánto puedo ahorrar con energía renovable?",\n                "¿Para qué sirve el simulador?",\n                "¿Qué es un termotanque solar?"\n            ];\n            \n            // Crear HTML para sugerencias\n            const sugerenciasHTML = `\n                <div class="chat-suggestions mt-3 chat-suggestion-new">\n                    <div class="small text-muted mb-2">¿Te gustaría saber más sobre:</div>\n                    <div class="d-flex flex-wrap gap-2">\n                        ${sugerencias.map(sugerencia => \n                            `<span class="chat-suggestion-pill" onclick="seleccionarPreguntaSugerida(this)">\n                                ${sugerencia}\n                            </span>`\n                        ).join(\'\')}\n                    </div>\n                </div>\n            `;\n            \n            if (floatingChatBody) {\n                floatingChatBody.innerHTML += sugerenciasHTML;\n                floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n            }\n        }\n        \n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const chatIcon = document.getElementById(\'chatIcon\');\n            const floatingChat = document.getElementById(\'floatingChat\');\n            const closeChat = document.getElementById(\'closeChat\');\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            const sendFloatingChat = document.getElementById(\'sendFloatingChat\');\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            // Abrir chat\n            chatIcon.addEventListener(\'click\', function() {\n                abrirChatbot();\n            });\n            \n            // Cerrar chat\n            closeChat.addEventListener(\'click\', function() {\n                floatingChat.classList.remove(\'show-chat\');\n            });\n            \n            // Función para agregar mensaje del usuario\n            function agregarMensajeUsuario(texto) {\n                const mensajeHTML = `\n                    <div class="chat-message user">\n                        <div class="d-flex align-items-start">\n                            <div>\n                                <p class="mb-0">${texto}</p>\n                            </div>\n                            <div class="ms-2 mt-1">\n                                <i class="fas fa-user text-primary"></i>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                scrollToBottom();\n            }\n            \n            // Función para agregar mensaje del bot\n            function agregarMensajeBot(texto) {\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-info"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">${texto}</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                \n                // Después de cada respuesta, mostrar sugerencias de preguntas relacionadas\n                mostrarSugerenciasPreguntas();\n                \n                scrollToBottom();\n            }\n            \n            // Ahora usamos la función mostrarNuevasSugerencias definida globalmente\n            \n            // Función para obtener sugerencias contextuales (rotamos categorías)\n            function obtenerSugerenciasContextuales() {\n                const todasLasSugerencias = {\n                    solar: [\n                        "¿Cuántos paneles solares necesito para mi casa?",\n                        "¿Cómo funcionan los paneles fotovoltaicos?",\n                        "¿Cuál es la vida útil de los paneles solares?"\n                    ],\n                    eolica: [\n                        "¿Funciona la energía eólica en zonas urbanas?",\n                        "¿Qué condiciones de viento se necesitan?",\n                        "¿Es ruidoso un aerogenerador doméstico?"\n                    ],\n                    termotanque: [\n                        "¿En qué se diferencia un termotanque solar de los paneles?",\n                        "¿Qué mantenimiento necesita un termotanque solar?",\n                        "¿Funciona en días nublados?"\n                    ],\n                    economia: [\n                        "¿Existen incentivos fiscales para energías renovables?",\n                        "¿Cuánto tiempo toma recuperar la inversión?",\n                        "¿Puedo vender energía a la red eléctrica?"\n                    ],\n                    instalacion: [\n                        "¿Qué permisos necesito para instalar paneles solares?",\n                        "¿Cuánto tiempo toma la instalación?",\n                        "¿Puedo instalar sistemas renovables en un apartamento?"\n                    ]\n                };\n                \n                // Seleccionar 2-3 categorías aleatorias\n                const categorias = Object.keys(todasLasSugerencias);\n                const categoriasSugeridas = [];\n                \n                while (categoriasSugeridas.length < 2) {\n                    const categoriaAleatoria = categorias[Math.floor(Math.random() * categorias.length)];\n                    if (!categoriasSugeridas.includes(categoriaAleatoria)) {\n                        categoriasSugeridas.push(categoriaAleatoria);\n                    }\n                }\n                \n                // Seleccionar 1 pregunta aleatoria de cada categoría seleccionada\n                const preguntasSugeridas = [];\n                categoriasSugeridas.forEach(categoria => {\n                    const preguntasCategoria = todasLasSugerencias[categoria];\n                    const preguntaAleatoria = preguntasCategoria[Math.floor(Math.random() * preguntasCategoria.length)];\n                    preguntasSugeridas.push(preguntaAleatoria);\n                });\n                \n                // Añadir 1-2 preguntas adicionales específicas\n                preguntasSugeridas.push("¿Qué sistema de energía renovable es más económico?");\n                \n                return preguntasSugeridas;\n            }\n            \n            // La función seleccionarPreguntaSugerida ya está definida globalmente\n            \n            // Función para mostrar indicador de escritura\n            function mostrarEscribiendo() {\n                const mensajeHTML = `\n                    <div class="chat-message bot" id="typing-message">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-info"></i>\n                            </div>\n                            <div class="typing-indicator">\n                                <span></span>\n                                <span></span>\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                scrollToBottom();\n            }\n            \n            // Función para quitar indicador de escritura\n            function quitarEscribiendo() {\n                const typingMessage = document.getElementById(\'typing-message\');\n                if (typingMessage) {\n                    typingMessage.remove();\n                }\n            }\n            \n            // Función para hacer scroll hasta el final del chat\n            function scrollToBottom() {\n                floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n            }\n            \n            // Función para enviar pregunta al servidor\n            function enviarPregunta() {\n                const pregunta = floatingChatInput.value.trim();\n                if (pregunta === \'\') return;\n                \n                // Agregar mensaje del usuario al chat\n                agregarMensajeUsuario(pregunta);\n                \n                // Limpiar input\n                floatingChatInput.value = \'\';\n                \n                // Mostrar indicador de escritura\n                mostrarEscribiendo();\n                \n                console.log("Enviando pregunta al chatbot:", pregunta);\n                \n                // Enviar pregunta a la API\n                fetch(\'{{ url_for(\'chatbot.consulta_chatbot\') }}\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({ pregunta: pregunta }),\n                })\n                .then(response => {\n                    console.log("Respuesta recibida:", response);\n                    return response.json();\n                })\n                .then(data => {\n                    console.log("Datos de respuesta:", data);\n                    // Quitar indicador de escritura\n                    quitarEscribiendo();\n                    \n                    // Agregar respuesta del bot\n                    agregarMensajeBot(data.respuesta);\n                    \n                    // Mostrar nuevas sugerencias después de un breve retraso\n                    setTimeout(function() {\n                        mostrarNuevasSugerencias();\n                    }, 500);\n                })\n                .catch(error => {\n                    console.error(\'Error en consulta chatbot:\', error);\n                    quitarEscribiendo();\n                    agregarMensajeBot(\'Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, inténtalo de nuevo más tarde.\');\n                });\n            }\n            \n            // Event listeners\n            sendFloatingChat.addEventListener(\'click\', enviarPregunta);\n            \n            floatingChatInput.addEventListener(\'keypress\', function(e) {\n                if (e.key === \'Enter\' && !e.shiftKey) {\n                    e.preventDefault();\n                    enviarPregunta();\n                }\n            });\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Función global para abrir el chatbot (accesible desde cualquier parte de la aplicación)\n        function abrirChatbot() {\n            const floatingChat = document.getElementById(\'floatingChat\');\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            \n            if (floatingChat) {\n                floatingChat.classList.add(\'show-chat\');\n                if (floatingChatInput) {\n                    setTimeout(function() {\n                        floatingChatInput.focus();\n                    }, 100);\n                }\n            }\n        }\n        \n        // Función global para seleccionar una pregunta sugerida y enviarla automáticamente\n        function seleccionarPreguntaSugerida(elemento) {\n            // Obtener el texto de la pregunta\n            const pregunta = elemento.textContent.trim();\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            console.log("Pregunta seleccionada:", pregunta);\n            \n            // Colocar la pregunta en el campo de entrada\n            if (floatingChatInput) {\n                floatingChatInput.value = pregunta;\n            }\n            \n            // Añadir la pregunta como mensaje del usuario (definir en caso de que no exista)\n            if (typeof agregarMensajeUsuario !== \'function\') {\n                function agregarMensajeUsuario(texto) {\n                    const mensajeHTML = `\n                        <div class="chat-message user">\n                            <div class="d-flex align-items-start justify-content-end">\n                                <div class="text-end">\n                                    <p class="mb-0">${texto}</p>\n                                </div>\n                                <div class="ms-2 mt-1">\n                                    <i class="fas fa-user text-primary"></i>\n                                </div>\n                            </div>\n                        </div>\n                    `;\n                    \n                    if (floatingChatBody) {\n                        floatingChatBody.innerHTML += mensajeHTML;\n                        floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                    }\n                }\n            }\n            \n            // Añadir mensaje del usuario\n            agregarMensajeUsuario(pregunta);\n            \n            // Limpiar el campo de entrada después de enviar\n            if (floatingChatInput) {\n                floatingChatInput.value = \'\';\n            }\n            \n            // Enviar la pregunta al servidor\n            fetch(\'/chatbot/consulta\', {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({ pregunta: pregunta })\n            })\n            .then(response => response.json())\n            .then(data => {\n                // Añadir respuesta del bot\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-success"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">${data.respuesta}</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                if (floatingChatBody) {\n                    floatingChatBody.innerHTML += mensajeHTML;\n                    floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                    \n                    // Mostrar nuevas preguntas sugeridas\n                    setTimeout(function() {\n                        mostrarNuevasSugerencias();\n                    }, 500);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error al consultar chatbot:\', error);\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-success"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, intenta de nuevo más tarde.</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                \n                if (floatingChatBody) {\n                    floatingChatBody.innerHTML += mensajeHTML;\n                    floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n                }\n            });\n        }\n        \n        // Función para mostrar nuevas sugerencias\n        function mostrarNuevasSugerencias() {\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            // Eliminar sugerencias anteriores si existen\n            document.querySelectorAll(\'.chat-suggestion-new\').forEach(el => {\n                el.remove();\n            });\n            \n            // Preguntas sugeridas\n            const sugerencias = [\n                "¿Qué sistema de energía renovable es más económico?",\n                "¿Cuánto puedo ahorrar con energía renovable?",\n                "¿Para qué sirve el simulador?",\n                "¿Qué es un termotanque solar?"\n            ];\n            \n            // Crear HTML para sugerencias\n            const sugerenciasHTML = `\n                <div class="chat-suggestions mt-3 chat-suggestion-new">\n                    <div class="small text-muted mb-2">¿Te gustaría saber más sobre:</div>\n                    <div class="d-flex flex-wrap gap-2">\n                        ${sugerencias.map(sugerencia => \n                            `<span class="chat-suggestion-pill" onclick="seleccionarPreguntaSugerida(this)">\n                                ${sugerencia}\n                            </span>`\n                        ).join(\'\')}\n                    </div>\n                </div>\n            `;\n            \n            if (floatingChatBody) {\n                floatingChatBody.innerHTML += sugerenciasHTML;\n                floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n            }\n        }\n        \n        document.addEventListener(\'DOMContentLoaded\', function() {\n            const chatIcon = document.getElementById(\'chatIcon\');\n            const floatingChat = document.getElementById(\'floatingChat\');\n            const closeChat = document.getElementById(\'closeChat\');\n            const floatingChatInput = document.getElementById(\'floatingChatInput\');\n            const sendFloatingChat = document.getElementById(\'sendFloatingChat\');\n            const floatingChatBody = document.getElementById(\'floatingChatBody\');\n            \n            // Abrir chat\n            chatIcon.addEventListener(\'click\', function() {\n                abrirChatbot();\n            });\n            \n            // Cerrar chat\n            closeChat.addEventListener(\'click\', function() {\n                floatingChat.classList.remove(\'show-chat\');\n            });\n            \n            // Función para agregar mensaje del usuario\n            function agregarMensajeUsuario(texto) {\n                const mensajeHTML = `\n                    <div class="chat-message user">\n                        <div class="d-flex align-items-start">\n                            <div>\n                                <p class="mb-0">${texto}</p>\n                            </div>\n                            <div class="ms-2 mt-1">\n                                <i class="fas fa-user text-primary"></i>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                scrollToBottom();\n            }\n            \n            // Función para agregar mensaje del bot\n            function agregarMensajeBot(texto) {\n                const mensajeHTML = `\n                    <div class="chat-message bot">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-info"></i>\n                            </div>\n                            <div>\n                                <p class="mb-0">${texto}</p>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                \n                // Después de cada respuesta, mostrar sugerencias de preguntas relacionadas\n                mostrarSugerenciasPreguntas();\n                \n                scrollToBottom();\n            }\n            \n            // Ahora usamos la función mostrarNuevasSugerencias definida globalmente\n            \n            // Función para obtener sugerencias contextuales (rotamos categorías)\n            function obtenerSugerenciasContextuales() {\n                const todasLasSugerencias = {\n                    solar: [\n                        "¿Cuántos paneles solares necesito para mi casa?",\n                        "¿Cómo funcionan los paneles fotovoltaicos?",\n                        "¿Cuál es la vida útil de los paneles solares?"\n                    ],\n                    eolica: [\n                        "¿Funciona la energía eólica en zonas urbanas?",\n                        "¿Qué condiciones de viento se necesitan?",\n                        "¿Es ruidoso un aerogenerador doméstico?"\n                    ],\n                    termotanque: [\n                        "¿En qué se diferencia un termotanque solar de los paneles?",\n                        "¿Qué mantenimiento necesita un termotanque solar?",\n                        "¿Funciona en días nublados?"\n                    ],\n                    economia: [\n                        "¿Existen incentivos fiscales para energías renovables?",\n                        "¿Cuánto tiempo toma recuperar la inversión?",\n                        "¿Puedo vender energía a la red eléctrica?"\n                    ],\n                    instalacion: [\n                        "¿Qué permisos necesito para instalar paneles solares?",\n                        "¿Cuánto tiempo toma la instalación?",\n                        "¿Puedo instalar sistemas renovables en un apartamento?"\n                    ]\n                };\n                \n                // Seleccionar 2-3 categorías aleatorias\n                const categorias = Object.keys(todasLasSugerencias);\n                const categoriasSugeridas = [];\n                \n                while (categoriasSugeridas.length < 2) {\n                    const categoriaAleatoria = categorias[Math.floor(Math.random() * categorias.length)];\n                    if (!categoriasSugeridas.includes(categoriaAleatoria)) {\n                        categoriasSugeridas.push(categoriaAleatoria);\n                    }\n                }\n                \n                // Seleccionar 1 pregunta aleatoria de cada categoría seleccionada\n                const preguntasSugeridas = [];\n                categoriasSugeridas.forEach(categoria => {\n                    const preguntasCategoria = todasLasSugerencias[categoria];\n                    const preguntaAleatoria = preguntasCategoria[Math.floor(Math.random() * preguntasCategoria.length)];\n                    preguntasSugeridas.push(preguntaAleatoria);\n                });\n                \n                // Añadir 1-2 preguntas adicionales específicas\n                preguntasSugeridas.push("¿Qué sistema de energía renovable es más económico?");\n                \n                return preguntasSugeridas;\n            }\n            \n            // La función seleccionarPreguntaSugerida ya está definida globalmente\n            \n            // Función para mostrar indicador de escritura\n            function mostrarEscribiendo() {\n                const mensajeHTML = `\n                    <div class="chat-message bot" id="typing-message">\n                        <div class="d-flex align-items-start">\n                            <div class="me-2 mt-1">\n                                <i class="fas fa-robot text-info"></i>\n                            </div>\n                            <div class="typing-indicator">\n                                <span></span>\n                                <span></span>\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                floatingChatBody.innerHTML += mensajeHTML;\n                scrollToBottom();\n            }\n            \n            // Función para quitar indicador de escritura\n            function quitarEscribiendo() {\n                const typingMessage = document.getElementById(\'typing-message\');\n                if (typingMessage) {\n                    typingMessage.remove();\n                }\n            }\n            \n            // Función para hacer scroll hasta el final del chat\n            function scrollToBottom() {\n                floatingChatBody.scrollTop = floatingChatBody.scrollHeight;\n            }\n            \n            // Función para enviar pregunta al servidor\n            function enviarPregunta() {\n                const pregunta = floatingChatInput.value.trim();\n                if (pregunta === \'\') return;\n                \n                // Agregar mensaje del usuario al chat\n                agregarMensajeUsuario(pregunta);\n                \n                // Limpiar input\n                floatingChatInput.value = \'\';\n                \n                // Mostrar indicador de escritura\n                mostrarEscribiendo();\n                \n                console.log("Enviando pregunta al chatbot:", pregunta);\n                \n                // Enviar pregunta a la API\n                fetch(\'{{ url_for(\'chatbot.consulta_chatbot\') }}\', {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\',\n                    },\n                    body: JSON.stringify({ pregunta: pregunta }),\n                })\n                .then(response => {\n                    console.log("Respuesta recibida:", response);\n                    return response.json();\n                })\n                .then(data => {\n                    console.log("Datos de respuesta:", data);\n                    // Quitar indicador de escritura\n                    quitarEscribiendo();\n                    \n                    // Agregar respuesta del bot\n                    agregarMensajeBot(data.respuesta);\n                    \n                    // Mostrar nuevas sugerencias después de un breve retraso\n                    setTimeout(function() {\n                        mostrarNuevasSugerencias();\n                    }, 500);\n                })\n                .catch(error => {\n                    console.error(\'Error en consulta chatbot:\', error);\n                    quitarEscribiendo();\n                    agregarMensajeBot(\'Lo siento, ha ocurrido un error al procesar tu pregunta. Por favor, inténtalo de nuevo más tarde.\');\n                });\n            }\n            \n            // Event listeners\n            sendFloatingChat.addEventListener(\'click\', enviarPregunta);\n            \n            floatingChatInput.addEventListener(\'keypress\', function(e) {\n                if (e.key === \'Enter\' && !e.shiftKey) {\n                    e.preventDefault();\n                    enviarPregunta();\n                }\n            });\n        });\n    </script>\n', PosixPath('ecosmart_advisor/app/templates/layout.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = d9b6a5aa6b1d45fbe389466b3069fefe090ad156d1a849f65d9affd1824efdec5bb5f9caa333cb165b8da25a10afebfdcb33b3b41d9459dde761730bc3296480_0
2025-05-11 21:23:21,960 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('ecosmart_advisor/app/templates/resultado_simulacion.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 75075de4bfbc787462afb5028fb34bf2023e54a8c510a3aaf56616a804d04b21160b552212837df61f8e7e2dcce300b0d6ef216a8bf51eb091b9d057d39103c1_0
2025-05-11 21:23:21,960 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/resultado_simulacion.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8f32d0df3792cc892d593a340a0fdf7dda68b86507a53cec1a4f4b37dbde7936cbc659894a9fc28a043ce3b7188f4d92059cc3861bc6b61c4d030e9936500f88_0
2025-05-11 21:23:21,961 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/resultado_simulacion.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8f32d0df3792cc892d593a340a0fdf7dda68b86507a53cec1a4f4b37dbde7936cbc659894a9fc28a043ce3b7188f4d92059cc3861bc6b61c4d030e9936500f88_0
2025-05-11 21:23:21,962 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/chart.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/chart.js" > <script  src="https://cdn.jsdelivr.net/npm/chart.js" >...</script>', PosixPath('ecosmart_advisor/app/templates/resultado_simulacion.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8f32d0df3792cc892d593a340a0fdf7dda68b86507a53cec1a4f4b37dbde7936cbc659894a9fc28a043ce3b7188f4d92059cc3861bc6b61c4d030e9936500f88_0
2025-05-11 21:23:21,962 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = f5a1d78d28043340433dedc0a20165e63b50d9aa4305aede97be74105c8207b5b89db08fa6703decc4ec27aafa081254be07d38814f40c19f447cf4721551845_0
2025-05-11 21:23:21,962 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-05-11 21:23:21,963 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-05-11 21:23:21,963 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-05-11 21:23:21,964 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('start_app.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c89c0b86e1f1e779eb9caf90019ef413875e88f2ad7a56dec2f9fd4db56bf2da1d9fb19d05bb176b8b471e580f26749ba48399d59ca40fd3be9df295c3637c3_0
2025-05-11 21:23:21,964 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('start_app.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = b7f4396f09fc5ba68239fd0ac0c307fcb647c53148ee1f7e1047c07b3cb801707e04c5ac2cd7fa92b36b1db63c5059bc27d7939daafd02050625374f7fad0a10_0
2025-05-11 21:23:21,964 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('start_app.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = b7f4396f09fc5ba68239fd0ac0c307fcb647c53148ee1f7e1047c07b3cb801707e04c5ac2cd7fa92b36b1db63c5059bc27d7939daafd02050625374f7fad0a10_0
2025-05-11 21:23:21,965 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('start_app.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = b7f4396f09fc5ba68239fd0ac0c307fcb647c53148ee1f7e1047c07b3cb801707e04c5ac2cd7fa92b36b1db63c5059bc27d7939daafd02050625374f7fad0a10_0
2025-05-11 21:23:21,967 - semgrep.core_runner - DEBUG - semgrep ran in 0:00:03.222897 on 47 files
2025-05-11 21:23:21,969 - semgrep.core_runner - DEBUG - findings summary: 17 warning, 2 error, 1 info
2025-05-11 21:23:21,972 - semgrep.app.auth - DEBUG - Getting API token from settings file
2025-05-11 21:23:21,972 - semgrep.app.auth - DEBUG - No API token found in settings file
2025-05-11 21:23:21,973 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEIddpkek/semgrep/bin/semgrep-core-proprietary'.
2025-05-11 21:23:22,080 - semgrep.output - VERBOSE - 
========================================
Files skipped:
========================================

  Always skipped by Opengrep:

   • <none>

  Skipped by .gitignore:
  (Disable by passing --no-git-ignore)

   • <all files not listed by `git ls-files` were skipped>

  Skipped by .semgrepignore:
  - https://semgrep.dev/docs/ignoring-files-folders-code/#understand-semgrep-defaults

   • <none>

  Skipped by --include patterns:

   • <none>

  Skipped by --exclude patterns:

   • <none>

  Files skipped due to insufficient read permissions:

   • <none>

  Skipped by limiting to files smaller than 1000000 bytes:
  (Adjust with the --max-target-bytes flag)

   • attached_assets/generador-de-energia-de-turbina-de-viento-con-cielo-azul.jpg
   • ecosmart_advisor/app/static/images/carousel/generador-de-energia-de-turbina-de-viento-con-cielo-azul.jpg
   • ecosmart_advisor/app/static/images/carousel/persona-cerca-de-la-planta-de-energia-alternativa.jpg
   • ecosmart_advisor/app/static/images/carousel/vista aerea paneles solares.jpg
   • ecosmart_advisor/app/static/images/carousel/vista hombre colocando panel solar.jpg

  Partially analyzed due to parsing or internal Opengrep errors

   • ecosmart_advisor/app/templates/chatbot.html (14 lines skipped)
   • ecosmart_advisor/app/templates/formulario_diagnostico.html (9 lines skipped)
   • ecosmart_advisor/app/templates/formulario_simulador.html (12 lines skipped)
   • ecosmart_advisor/app/templates/index.html (5 lines skipped)
   • ecosmart_advisor/app/templates/layout.html (2 lines skipped)
   • ecosmart_advisor/app/templates/resultado_diagnostico.html (7 lines skipped)
   • ecosmart_advisor/app/templates/resultado_simulacion.html (18 lines skipped)

2025-05-11 21:23:22,081 - semgrep.output - INFO - Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.
  Partially scanned: 7 files only partially analyzed due to parsing or internal Opengrep errors
  Scan skipped: 5 files larger than 1.0 MB
  For a full list of skipped files, run opengrep with the --verbose flag.

Ran 690 rules on 47 files: 20 findings.
2025-05-11 21:23:22,082 - semgrep.app.version - DEBUG - Version cache does not exist
2025-05-11 21:23:22,105 - semgrep.metrics - VERBOSE - Not sending pseudonymous metrics since metrics are configured to OFF and registry usage is False
